{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udfe0 Game Engine Fall 2024 Broad 4240 Tuesdays and Thursdays, 2 p.m. - 4:50 p.m. INSTRUCTOR - Hua Chai (he/they) Office hours: By appointment only; Thursday, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: huazzers@g.ucla.edu TEACHING ASSISTANT - Sagan Yee (he/they) Office hours: By appointment only; Tuesday, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: saganyee@ucla.edu","title":"\ud83c\udfe0 Home"},{"location":"#game-engine","text":"","title":"\ud83c\udfe0 Game Engine"},{"location":"#fall-2024","text":"Broad 4240 Tuesdays and Thursdays, 2 p.m. - 4:50 p.m. INSTRUCTOR - Hua Chai (he/they) Office hours: By appointment only; Thursday, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: huazzers@g.ucla.edu TEACHING ASSISTANT - Sagan Yee (he/they) Office hours: By appointment only; Tuesday, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: saganyee@ucla.edu","title":"Fall 2024"},{"location":"how-to-submit/","text":"How to Submit Important Notes \u26a0\ufe0f Do NOT show the Unity Editor in your visual documentation. \u26a0\ufe0f Build early and play test your builds. Some bugs will only reveal themselves in a build, so make sure to catch those in advance of the deadline. A broken game will affect your project grade. Submission Checklist You should include the following documentation of your project by 11:59PM on the day of the project deadline : Visual documentation : at least ONE animated GIF of your project in motion, roughly 600 pixels wide, ideally under 5MB in size. at least TWO stills from your project (1920x1080) (Optional) Recording of gameplay. Roughly 60 seconds, long enough to demonstrate how your game is played (1920x1080, mp4/h.264) Text description that would be useful for someone viewing your project for the first time: The basic premise of the game -- what is it about? How to play the game -- how do you interact with the project? Project build for WINDOWS Exported Unity package Tools for Visual Documentation Animated GIFs Animated GIFs are durable and easy to view (though not always small in size). In this course we will use animated GIFs as a quasi-archival format for animated visual material. Preferably, they should be 600 pixels wide and under 5MB in file size. I personally use and recommend ScreenToGif , which is a good tool for quickly making a gif. Photoshop, Premiere, AfterEffects, or other video editors can also export gifs. You may also find the following free tools helpful: EzGif.com is an online GIF maker, editor, and compressor. Great for reducing the file size of GIFs. LICEcap is a badly-named free OSX app which can capture an area of your screen and save it directly to an animated GIF. Online-convert.com offers a browser tool for converting videos into GIFs. Screenshots and Screen Recordings Make a build first and run it full screen to capture images and video of your project. For screen recordings, OBS works very well. You may also use the Unity Recorder to capture single frames and videos from within the Unity Editor. Built-in OS screenshot shortcuts: Windows To take a screenshot and automatically save the file, press the Windows key + PrtScn . Your screen will go dim and a screenshot of your entire screen will save to the Pictures > Screenshots folder . Also consider the snipping tool, which is a convenient way to capture a portion of your screen. Mac To take a screenshot, press Shift + Command + 3 . If you see a thumbnail in the corner of your screen, click it to edit the screenshot. Or wait for the screenshot to save to your desktop. By default, screenshots save to your desktop with the name \u201dScreen Shot [date] at [time].png.\u201d How to export projects from Unity Building your project Start by opening the build settings under File > Build Settings . Add all the scenes you want to include in your project by clicking and dragging them from your assets folder to \u201cScenes in Build\u201d (also remove any scenes you don\u2019t want to include). The topmost scene in this list will be the first to play when starting the game. Create a Windows build by changing Target Platform to \u201cWindows\u201d and clicking build. After the build has finished, create a zipped folder containing all of the files and folders that unity created. The build needs all these folders, exes, and dlls to run properly. Unity Packages Read the official documentation for exporting and importing Unity packages . Rather than creating a zip file of your entire Unity project folder, you can save a lot of time (and space) by exporting only the assets for the scenes, materials, prefabs, etc. that you want to share. This is called exporting an asset package. Exporting Unity Packages You have two options: Find your scene file in the Project tab, right click the scene, and click \u201cExport Package\u2026\u201d OR Click Assets > Export Package\u2026 In the window that opens, de-select any assets that you don\u2019t want to include. Be careful that you don\u2019t exclude anything required to run your scene. If you only had your scene selected when clicking Export Package\u2026 , the window will only display the assets directly used in that scene. You can select entire folders, or even the top level Assets folder to bring up more assets to include in the export. Make sure the Include dependencies box is checked and click Export\u2026 to save your unitypackage file. Importing Unity Packages To import a package into another project, double click the \u201c.unitypackage\u201d file with a project open and an import window will appear. You can also click Assets > Import Package > Custom Package\u2026 to select the unitypackage file via explorer/finder. Select the assets you want to import and click Import .","title":"How To Submit"},{"location":"how-to-submit/#how-to-submit","text":"","title":"How to Submit"},{"location":"how-to-submit/#important-notes","text":"\u26a0\ufe0f Do NOT show the Unity Editor in your visual documentation. \u26a0\ufe0f Build early and play test your builds. Some bugs will only reveal themselves in a build, so make sure to catch those in advance of the deadline. A broken game will affect your project grade.","title":"Important Notes"},{"location":"how-to-submit/#submission-checklist","text":"You should include the following documentation of your project by 11:59PM on the day of the project deadline : Visual documentation : at least ONE animated GIF of your project in motion, roughly 600 pixels wide, ideally under 5MB in size. at least TWO stills from your project (1920x1080) (Optional) Recording of gameplay. Roughly 60 seconds, long enough to demonstrate how your game is played (1920x1080, mp4/h.264) Text description that would be useful for someone viewing your project for the first time: The basic premise of the game -- what is it about? How to play the game -- how do you interact with the project? Project build for WINDOWS Exported Unity package","title":"Submission Checklist"},{"location":"how-to-submit/#tools-for-visual-documentation","text":"","title":"Tools for Visual Documentation"},{"location":"how-to-submit/#animated-gifs","text":"Animated GIFs are durable and easy to view (though not always small in size). In this course we will use animated GIFs as a quasi-archival format for animated visual material. Preferably, they should be 600 pixels wide and under 5MB in file size. I personally use and recommend ScreenToGif , which is a good tool for quickly making a gif. Photoshop, Premiere, AfterEffects, or other video editors can also export gifs. You may also find the following free tools helpful: EzGif.com is an online GIF maker, editor, and compressor. Great for reducing the file size of GIFs. LICEcap is a badly-named free OSX app which can capture an area of your screen and save it directly to an animated GIF. Online-convert.com offers a browser tool for converting videos into GIFs.","title":"Animated GIFs"},{"location":"how-to-submit/#screenshots-and-screen-recordings","text":"Make a build first and run it full screen to capture images and video of your project. For screen recordings, OBS works very well. You may also use the Unity Recorder to capture single frames and videos from within the Unity Editor.","title":"Screenshots and Screen Recordings"},{"location":"how-to-submit/#built-in-os-screenshot-shortcuts","text":"","title":"Built-in OS screenshot shortcuts:"},{"location":"how-to-submit/#windows","text":"To take a screenshot and automatically save the file, press the Windows key + PrtScn . Your screen will go dim and a screenshot of your entire screen will save to the Pictures > Screenshots folder . Also consider the snipping tool, which is a convenient way to capture a portion of your screen.","title":"Windows"},{"location":"how-to-submit/#mac","text":"To take a screenshot, press Shift + Command + 3 . If you see a thumbnail in the corner of your screen, click it to edit the screenshot. Or wait for the screenshot to save to your desktop. By default, screenshots save to your desktop with the name \u201dScreen Shot [date] at [time].png.\u201d","title":"Mac"},{"location":"how-to-submit/#how-to-export-projects-from-unity","text":"","title":"How to export projects from Unity"},{"location":"how-to-submit/#building-your-project","text":"Start by opening the build settings under File > Build Settings . Add all the scenes you want to include in your project by clicking and dragging them from your assets folder to \u201cScenes in Build\u201d (also remove any scenes you don\u2019t want to include). The topmost scene in this list will be the first to play when starting the game. Create a Windows build by changing Target Platform to \u201cWindows\u201d and clicking build. After the build has finished, create a zipped folder containing all of the files and folders that unity created. The build needs all these folders, exes, and dlls to run properly.","title":"Building your project"},{"location":"how-to-submit/#unity-packages","text":"Read the official documentation for exporting and importing Unity packages . Rather than creating a zip file of your entire Unity project folder, you can save a lot of time (and space) by exporting only the assets for the scenes, materials, prefabs, etc. that you want to share. This is called exporting an asset package.","title":"Unity Packages"},{"location":"how-to-submit/#exporting-unity-packages","text":"You have two options: Find your scene file in the Project tab, right click the scene, and click \u201cExport Package\u2026\u201d OR Click Assets > Export Package\u2026 In the window that opens, de-select any assets that you don\u2019t want to include. Be careful that you don\u2019t exclude anything required to run your scene. If you only had your scene selected when clicking Export Package\u2026 , the window will only display the assets directly used in that scene. You can select entire folders, or even the top level Assets folder to bring up more assets to include in the export. Make sure the Include dependencies box is checked and click Export\u2026 to save your unitypackage file.","title":"Exporting Unity Packages"},{"location":"how-to-submit/#importing-unity-packages","text":"To import a package into another project, double click the \u201c.unitypackage\u201d file with a project open and an import window will appear. You can also click Assets > Import Package > Custom Package\u2026 to select the unitypackage file via explorer/finder. Select the assets you want to import and click Import .","title":"Importing Unity Packages"},{"location":"project-1/","text":"Project 1: Auto-Generator Final Submission Due: Week 3 Tuesday, October 15 Submit Here Please read the How To Submit page for more detailed instructions. Prompt Create a generator in Unity that only requires 1 ~ 2 button controls to run. Consider the following options: a landscape / level / terrain generator; a random character generator, eg. exquisite corpse; an evolution simulator, e.g. cellular automaton. Possible techniques: modular architecture using prefabs, arrays/lists, instantiate/destroy functions, empty transforms as connection points; procedural / algorithmic generation using random functions, perlin noise, custom parameters, L-systems, cellular automata, etc. Tips: Consider what constraints or rules you can impose to create unique forms and color palettes. You may work in 2D or 3D. Lean into your strengths as a visual designer / artist as much as possible with this project! (And also remember you don't have much time!) Consider how a viewer will see / experience your generative designs. Can they orbit the camera around? Can they press a button to generate new objects? Requirements Project 1 contains TWO COMPONENTS: PART 1 (2.5%): SKETCH OF PROJECT PROPOSAL Due: Week 2 Tuesday, October 8 A sketch and/or in-progress prototype of your project. Bring this to class for discussion! What are you generating? How are you generating it? PART 2 (12.5%): FINAL PROJECT BUILD WITH DOCUMENTATION Due: Week 3 Tuesday, October 15 Refer to submission guidelines , and submit your final project here (link TBD.) Total contribution to final course grade: 15% Your final project is not required to: be a traditional video game; have sound / audio. Evaluation Your final project will be evaluated according to the guidelines listed in the course syllabus .","title":"Project 1"},{"location":"project-1/#project-1-auto-generator","text":"","title":"Project 1: Auto-Generator"},{"location":"project-1/#final-submission-due-week-3-tuesday-october-15","text":"Submit Here Please read the How To Submit page for more detailed instructions.","title":"Final Submission Due: Week 3 Tuesday, October 15"},{"location":"project-1/#prompt","text":"Create a generator in Unity that only requires 1 ~ 2 button controls to run. Consider the following options: a landscape / level / terrain generator; a random character generator, eg. exquisite corpse; an evolution simulator, e.g. cellular automaton. Possible techniques: modular architecture using prefabs, arrays/lists, instantiate/destroy functions, empty transforms as connection points; procedural / algorithmic generation using random functions, perlin noise, custom parameters, L-systems, cellular automata, etc. Tips: Consider what constraints or rules you can impose to create unique forms and color palettes. You may work in 2D or 3D. Lean into your strengths as a visual designer / artist as much as possible with this project! (And also remember you don't have much time!) Consider how a viewer will see / experience your generative designs. Can they orbit the camera around? Can they press a button to generate new objects?","title":"Prompt"},{"location":"project-1/#requirements","text":"Project 1 contains TWO COMPONENTS: PART 1 (2.5%): SKETCH OF PROJECT PROPOSAL Due: Week 2 Tuesday, October 8 A sketch and/or in-progress prototype of your project. Bring this to class for discussion! What are you generating? How are you generating it? PART 2 (12.5%): FINAL PROJECT BUILD WITH DOCUMENTATION Due: Week 3 Tuesday, October 15 Refer to submission guidelines , and submit your final project here (link TBD.) Total contribution to final course grade: 15% Your final project is not required to: be a traditional video game; have sound / audio.","title":"Requirements"},{"location":"project-1/#evaluation","text":"Your final project will be evaluated according to the guidelines listed in the course syllabus .","title":"Evaluation"},{"location":"project-2/","text":"Project 2: TBD TBD","title":"Project 2"},{"location":"project-2/#project-2-tbd","text":"TBD","title":"Project 2: TBD"},{"location":"project-3/","text":"Project 3: Final Project TBD","title":"Project 3"},{"location":"project-3/#project-3-final-project","text":"TBD","title":"Project 3: Final Project"},{"location":"readings-and-homeplays/","text":"Readings and Homeplays Reading Responses Read the assigned material, and submit your response to the given questions in your own words. Reading Response 1 Due: Week 1 Thursday, October 3 Submit Your Response Here Read Kate Compton's \"So you want to build a generator\" https://galaxykate0.tumblr.com/post/139774965871/so-you-want-to-build-a-generator Optional If you're hungry for more, below are some recommended talks on more methods and applications of procedural generation: Kate Compton PROCJAM 2015 Talk (15:58 - 49:53) \"Let It Grow: Practical Procedural Generation From The Ground Up\" (34 min) https://www.youtube.com/live/s_eyo_m_hnc?feature=shared&t=958 Herbert Wolverson 2020 Roguelike Celebration Talk \"Procedural Map Generation Techniques\" (27 min) https://www.youtube.com/live/TlLIOgWYVpI Reading Response 2 Homeplays Sign up for game(s) to play in groups of 2~3; 30 ~ 60 minutes of total game play; Take notes, ask questions, consider the prompt; Take screenshots / recordings if needed. PC / HTML games will also be available in the PC work stations next to the 4th floor Undergrad Lounge (Exit the elevator, turn right into the lounge, and the PC work stations will be on your right.) Homeplay 1 Due: Week 2 Tuesday, October 8 Sign Up + Submit Presentations Here Plan to spend about 30 ~ 60 minutes playing the game(s) with your group members, then prepare a short 5 ~ 7 minute presentation in response to the following: Tell us about the project What is being generated? What generation method, properties, and constraints (do you think) are being used? How do you interact with it? Consider the effectiveness of this generator and your experience of it -- what works, what doesn't, and why? Do the generated results feel meaningful, memorable, merely distinguishable, or pretty much the same? Was there something else about the project that was notable in your experience of it -- the camera, gameplay, interface, etc. ? Please share a link to any presentation materials in the sign up sheet next to your group names. You will share your responses with the rest of the class during lesson time on the due date. Homeplay 2","title":"Readings & Homeplays"},{"location":"readings-and-homeplays/#readings-and-homeplays","text":"","title":"Readings and Homeplays"},{"location":"readings-and-homeplays/#reading-responses","text":"Read the assigned material, and submit your response to the given questions in your own words.","title":"Reading Responses"},{"location":"readings-and-homeplays/#reading-response-1","text":"Due: Week 1 Thursday, October 3 Submit Your Response Here Read Kate Compton's \"So you want to build a generator\" https://galaxykate0.tumblr.com/post/139774965871/so-you-want-to-build-a-generator Optional If you're hungry for more, below are some recommended talks on more methods and applications of procedural generation: Kate Compton PROCJAM 2015 Talk (15:58 - 49:53) \"Let It Grow: Practical Procedural Generation From The Ground Up\" (34 min) https://www.youtube.com/live/s_eyo_m_hnc?feature=shared&t=958 Herbert Wolverson 2020 Roguelike Celebration Talk \"Procedural Map Generation Techniques\" (27 min) https://www.youtube.com/live/TlLIOgWYVpI","title":"Reading Response 1"},{"location":"readings-and-homeplays/#reading-response-2","text":"","title":"Reading Response 2"},{"location":"readings-and-homeplays/#homeplays","text":"Sign up for game(s) to play in groups of 2~3; 30 ~ 60 minutes of total game play; Take notes, ask questions, consider the prompt; Take screenshots / recordings if needed. PC / HTML games will also be available in the PC work stations next to the 4th floor Undergrad Lounge (Exit the elevator, turn right into the lounge, and the PC work stations will be on your right.)","title":"Homeplays"},{"location":"readings-and-homeplays/#homeplay-1","text":"Due: Week 2 Tuesday, October 8 Sign Up + Submit Presentations Here Plan to spend about 30 ~ 60 minutes playing the game(s) with your group members, then prepare a short 5 ~ 7 minute presentation in response to the following: Tell us about the project What is being generated? What generation method, properties, and constraints (do you think) are being used? How do you interact with it? Consider the effectiveness of this generator and your experience of it -- what works, what doesn't, and why? Do the generated results feel meaningful, memorable, merely distinguishable, or pretty much the same? Was there something else about the project that was notable in your experience of it -- the camera, gameplay, interface, etc. ? Please share a link to any presentation materials in the sign up sheet next to your group names. You will share your responses with the rest of the class during lesson time on the due date.","title":"Homeplay 1"},{"location":"readings-and-homeplays/#homeplay-2","text":"","title":"Homeplay 2"},{"location":"schedule/","text":"\ud83d\udcc5 Schedule Tuesday Thursday W0 09/26 Due: Preliminary Survey Course Overview & Introductions, Tech check Lecture: Intro to Game Engine, Unity, and C# Assign: Reading Response 1 , Project 1 W1 10/01 Tutorial: Transforms, Vectors Assign: Homeplay 1 10/03 Due: Reading Response 1 Tutorial: Prefabs, Loops, Arrays W2 10/08 Due: Homeplay 1, Project 1 Sketch Tutorial: Randomness, Noise, Custom Classes for Storing Data 10/10 Tutorial: Basic Input, UI, Lights and Camera Settings Studio Time W3 10/15 Due: Project 1 Project 1 Crit 10/17 Lecture: Level Design Assign: Reading Response 2, Project 2 W4 10/22 Due: Reading Response 2 Tutorial: Physics and Interaction, Triggers, Collisions 10/24 Due: Project 2 Research Tutorial: Input Systems, Enumerations, Sprites W5 10/29 Due: Project 2 Sketch Tutorial: Static Variables, Events, Inventory 10/31 Tutorial: Scene Management, Singletons W6 11/05 Studio Time 11/07 Due: Project 2 Project 2 Crit W7 11/12 Alt-Engine Micro Game Jam? 11/14 Alt-Engine Micro Game Jam? Assign: Project 3 W8 11/19 Tutorial: Animation, Coroutines 11/21 Due: Project 3 Sketch Tutorial: Cinemachine W9 11/26 Studio Time 11/28 Thanksgiving - No class. W10 12/03 Studio Time 12/05 Due: Project 3","title":"\ud83d\udcc5 Schedule"},{"location":"schedule/#schedule","text":"Tuesday Thursday W0 09/26 Due: Preliminary Survey Course Overview & Introductions, Tech check Lecture: Intro to Game Engine, Unity, and C# Assign: Reading Response 1 , Project 1 W1 10/01 Tutorial: Transforms, Vectors Assign: Homeplay 1 10/03 Due: Reading Response 1 Tutorial: Prefabs, Loops, Arrays W2 10/08 Due: Homeplay 1, Project 1 Sketch Tutorial: Randomness, Noise, Custom Classes for Storing Data 10/10 Tutorial: Basic Input, UI, Lights and Camera Settings Studio Time W3 10/15 Due: Project 1 Project 1 Crit 10/17 Lecture: Level Design Assign: Reading Response 2, Project 2 W4 10/22 Due: Reading Response 2 Tutorial: Physics and Interaction, Triggers, Collisions 10/24 Due: Project 2 Research Tutorial: Input Systems, Enumerations, Sprites W5 10/29 Due: Project 2 Sketch Tutorial: Static Variables, Events, Inventory 10/31 Tutorial: Scene Management, Singletons W6 11/05 Studio Time 11/07 Due: Project 2 Project 2 Crit W7 11/12 Alt-Engine Micro Game Jam? 11/14 Alt-Engine Micro Game Jam? Assign: Project 3 W8 11/19 Tutorial: Animation, Coroutines 11/21 Due: Project 3 Sketch Tutorial: Cinemachine W9 11/26 Studio Time 11/28 Thanksgiving - No class. W10 12/03 Studio Time 12/05 Due: Project 3","title":"\ud83d\udcc5 Schedule"},{"location":"syllabus/","text":"\ud83d\udcdc Syllabus Fall 2024 Broad 4240 Tuesdays and Thursdays, 2 p.m. - 4:50 p.m. INSTRUCTOR - Hua Chai (he/they) Office hours: By appointment only; Thursdays, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: huazzers@g.ucla.edu TEACHING ASSISTANT - Sagan Yee (he/they) Office hours: By appointment only; Tuesdays, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: saganyee@ucla.edu Course Description This course introduces the fundamentals of programming interactive projects in game development software. Classwork focuses on familiarizing students with game engines, computer programming concepts, player experience, and other skills that are foundational to making digital games. Lectures, exercises, and class projects teach skills needed to create digital games including custom rules, interactive physics systems, vectors, generative or randomized levels, save data, custom input systems, score-keeping, and sound. This course is offered in parallel with the concurrent courses, Game Design and Interactive Animation. Course Prerequisites DESMA 24 Motion DESMA 101 Media Arts Introduction / DESMA 104 Design Futures This course will be heavy on C# scripting in Unity scripting API. If you haven't fulfilled the above pre-requisites but have prior experience in either writing code or using the Unity game engine , please let me know. Learning Outcomes By the end of this course, you will be able to create a real-time, interactive software with custom rules, generative or randomized levels, save data, responsive controls, physics, sound, and simple animation. The skills you will learn in this class translate well to immersive media, generative animation, and other modes of human-computer expression. Course Outline Unit 1: Generative Computation Using generative design to create random/unique/dynamic ecosystems, worlds, characters, and events in Unity. Week 0-3 Intro to Unity Game Engine and C# , Vector fundamentals , Prefabs and Instantiation , Arrays and Randomness, UI Project 1: Auto-Generator Unit 2: Playing with Physics Using physics, math, and other game engine tools to design environments and mechanics for interactive gameplay. Week 4-6 Level Design , Input Systems , Physics Simulations , Static Variables and Singletons, Sound Project 2: Ball Game Remix Intermission: Alt-Engines Explore other tiny game engines! Week 7 Micro Game Jam(s) -- Make an entire game in a single class. Unit 3: Save && Scene Using persistent data, effects, and cinematic affordances of the game engine to revise and refine your projects. Week 8-10 Cinemachine, Animation, Coroutines, Persistent Data Project 3: Final Project (TBD) Assignments and Grading See How To Submit on instructions for submitting Unity projects Course Breakdown Project 1: 15% Project 2: 25% Project 3: 25% Reading / Homeplay responses: 15% Participation / Attendance: 20% Evaluation Criteria Projects Considering the likelihood that everyone is coming in with different skillsets and coding experiences, the expectation for this class is that you approach each project with your own level of skill and comfort in mind. Design a project for yourself that pushes your technical skills a little bit , but also allows you to lean into your existing strengths and practices. We will evaluate your projects based on: Timely submission Did you submit your project on time? (see Late Work for more details.) Completion of Project Deliverables Does your project meet the requirements of the assignment? Attention to detail and craft Does the project run? Are there unintended bugs, glitches, etc. Project scope / aesthetic and technical ambition Are you doing the bare minimum, or are you pushing yourself technically and/or aesthetically? Creative risk-taking and resourcefulness Are you pushing the limits of the tools? Hacky solutions are perfectly acceptable and encouraged! Readings / Homeplays You will be assigned occasional readings and games that are related to this course, accompanied by a questionnaire for you to complete and bring to class. These are graded pass/fail -- if you did the work, you will get full credit. Participation / Attendance This is an in-person course , so please come to class on time. We will be covering a lot of content quickly, so it is very important that you are present for each day. If you are more than 15 minutes late, you will be marked as late. Three late marks results in an unexcused absence. Any disputes should be discussed with the TA within two weeks If you anticipate having to miss class, email the TA prior to the class. Absences will not be excused after the fact, except in extreme circumstances. You get one unexcused absence before it starts affecting your grade. Each unexcused absence that follows will result in one full letter grade deduction from your participation score. Your participation grade will also be determined by your level of engagement in class. If you seem disengaged or are disruptive in class, we will reach out and discuss the matter with you. If a pattern of disruption or disengagement continues, we will be taking note and it will be reflected in your grade. Other assignment-related rules Late Work On the day the project is due: Projects should be ready to play prior to the beginning of class. Project files and documentation should be submitted by 11:59PM the same day. After the due date, a full letter grade will be deducted from the project grade for each class day that the assignment is late. If you anticipate that you won\u2019t be able to complete the work by the due date, please contact us before the due date so we can discuss options. Appropriation, Fair Use, and Generated Content You should strive to develop your own assets for your project submissions. The use of existing prompt-based AI generation programs, including but not limited to ChatGPT, DALLE, Stable Diffusion, and Midjourney, is not allowed in this class. You may consider this to be one of the limitations of this class -- you are here to learn a specific set of technical skills, and the most advisable way to engage with this course is to not use these programs at all. There are many other reliable solutions and resources available to you, please use this opportunity to explore them. If you're planning to borrow or generate assets from somewhere else, you must consult the instructor beforehand AND be able to justify your decision for doing so. While developing early stage prototypes and testing mechanics, it is acceptable to use placeholder assets. No credit will be awarded for plagiarised work. All submitted projects should be original and developed within the duration of this class. Remember to acknowledge / cite your tools and sources appropriately in your submission. Resources Readings / Games All assigned readings and games will be provided for you -- no need to purchase textbooks for this class. (see Readings & Homeplays for more details.) Required Tools Unity -- Please install Unity Hub and get the latest LTS version of Unity Editor (currently 2022.3.43f1). Other editor versions may differ slightly from each other, but anything 2021 or later should be ok. Visual Studio -- Install Microsoft Visual Studio or Visual Studio Code, you should have the option to do this when installing Unity. Recommended Tools 2D and 3D production software of your choice: Krita -- professional free and open source digital paint tool. Blender -- powerful free and open source 3D art and animation tool. Piskel -- free pixel art app. Aseprite -- inexpensive pixel art and animation tool. Sculptris -- \u201cA gateway into the exciting world of 3D.\u201d Crocotile 3d -- A tool for creating 3d scenes with 2d tiles. Mixamo -- Free, but requires a login. Includes community sourced walk cycles and 3D animations which you can apply to any model that can T-pose. Audio resources: freesound.org -- audio database that has search filters sorted by licenses. login required for downloading files. good source for adding sound effects and music to your projects. Audacity -- free software for recording and editing audio; the version without Muse Hub should suffice for your purposes. For more asset creation tools, check out this exhaustive list of cheap and free tools compiled by Everest Pipkin . Additional resources for C# scripting and Unity development: Unity documentation -- Scripting Reference and Editor Manual . Community Forums -- Stack Exchange , Unity Discussions . Learn C# in One Day and Learn it Well by Jamie Chan. Campus-wide resources and information Land Acknowledgement The University of California, Los Angeles occupies the ancestral, traditional, and contemporary Lands of the Tongva and Chumash peoples. Our ability to gather and learn here is the result of coercion, dispossession, and colonization. We are grateful for the land itself and the people that have stewarded it through generations. While a land acknowledgment is not enough, it is the first step in the work toward supporting decolonial and indigenous movements for sovereignty and self-determination. Read more about what land you\u2019re occupying: https://native-land.ca/ Other resources on land repatriation: UCLA Mapping Indigenous LA -- an online archive of a storymapping research project about indigenous Los Angeles peoples, histories, and geographies from past and present. California History (Winter 2023), Respecting the Ancestors: On Repatriating American Indian Remains -- 2023 essay report on the history of repatriating indigenous peoples remains (mostly a lack thereof), including UC-specific case studies. Decolonization is not a metaphor -- article on what is unsettling about decolonisation as a caution against the loose use of the term in advocacy and scholarship. Commitment to Diversity & Safer Spaces We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students, TA, and instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the instructor or TA. (Statement adopted from voidLab at https://github.com/voidlab/diversity-statement ) COVID-19 It is important that everyone stay safe and avoid coming to class if you have any concerns about your health status. If you find that external struggles and/or COVID related challenges are affecting your ability to attend class, please reach out to us. We want you to be successful in the class, but we care about your well-being more than anything else. Open communication with us is most important in this regard, please let us know if you're sick and/or require additional accommodations. Students must adhere to the current campus directives related to COVID-19 mitigation, and refusal to do so may result in the student being asked to leave the classroom or referred to the Dean of Students. For more information about COVID-19 requirements on campus, please visit: https://covid-19.ucla.edu/information-for-students/ . Center for Accessible Education (CAE) The UCLA Center for Accessible Education (CAE) is responsible for ensuring students with documented disabilities have access to an inclusive, supportive learning environment. Students with disabilities or other needs requiring academic accommodations should speak with me as early in the quarter as possible to be sure they get the support they need. Students needing academic accommodations based on a disability should contact the Center for Accessible Education (CAE) at (310) 825-1501 or in person at Murphy Hall A255. When possible, students should contact the CAE within the first two weeks of the term as reasonable notice is needed to coordinate accommodations. For more information visit www.cae.ucla.edu . Academic Integrity and Information on Student Conduct UCLA is a community of scholars. In this community, all members including faculty, staff and students alike are responsible for maintaining standards of academic honesty. As a student and member of the University community, you are here to get an education and are, therefore, expected to demonstrate integrity in your academic endeavors. You are evaluated on your own merits. Cheating, plagiarism, collaborative work, multiple submissions without the permission of the professor, or other kinds of academic dishonesty are considered unacceptable behavior and will result in formal disciplinary proceedings usually resulting in suspension or dismissal. As specified in the UCLA Student Conduct Code , violations or attempted violations of academic dishonesty include, but are not limited to, cheating, fabrication, plagiarism, multiple submissions or facilitating academic dishonesty. When a student is suspected to have engaged in academic dishonesty, Academic Senate regulations require that the instructor report the allegation to the office of the Dean of Students. For more information, see the UCLA Student Conduct Code . TITLE IX UCLA prohibits gender discrimination, including sexual harassment, domestic and dating violence, sexual assault, and stalking. If you have experienced sexual harassment or sexual violence, there are a variety of resources to assist you. Confidential Resources You can receive confidential support and advocacy at the CARE Advocacy Office for Sexual and Gender-Based Violence, 1st Floor Wooden Center West, CAREadvocate@careprogram.ucla.edu , (310) 206-2465. Counseling and Psychological Services (CAPS) also provides confidential counseling to all students and can be reached 24/7 at (310) 825-0768. Non-Confidential Resources You can also report sexual violence or sexual harassment directly to the University\u2019s Title IX Coordinator, 2241 Murphy Hall, titleix@conet.ucla.edu , (310) 206-3417. Reports to law enforcement can be made to UCPD at (310) 825-1491. These offices may be required to pursue an official investigation. Faculty and TAs are required under the UC Policy on Sexual Violence and Sexual Harassment to inform the Title IX Coordinator\u2014A NON-CONFIDENTIAL RESOURCE\u2014should they become aware that you or any other student has experienced sexual violence or sexual harassment. Psychological Health, Well-Being and Resilience UCLA is renowned for academic excellence, and yet we know that many students feel overwhelmed at times by demands to succeed academically, socially and personally. Our campus community is committed to helping all students thrive, learn to cope with stress, and build resilience. Remember, self-care is a skill that is critical to your long-term success. Here are some of the many resources available at UCLA to support you: Counseling and Psychological Services (CAPS) : https://www.counseling.ucla.edu/ Provides counseling and other psychological/mental health services to students. Walk-in hours are Monday-Thursday 8am-4:30pm and Friday 9am-4:30pm in John Wooden Center West. Crisis counseling is also available 24 hours/day at (310) 825-0768. Ashe Student Health and Wellness Center : http://www.studenthealth.ucla.edu Provides high quality and accessible ambulatory healthcare and education by caring professionals to support the academic success and personal development of all UCLA students. Healthy Campus Initiative (HCI) : https://healthy.ucla.edu Provides links to a wide variety of resources for enhancing physical and psychological well-being, positive social interactions, healthy sleep, healthy eating, healthy physical activity and more. Campus and Student Resilience : https://www.resilience.ucla.edu/ Provides programs to promote resilience and trains students to help support their peers. UCLA Recreation : https://www.recreation.ucla.edu/ Offers a broad array of services and programs including fitness, yoga, dance, martial arts, meditation, sports, and much more. Equity, Diversity and Inclusion : https://equity.ucla.edu/ Committed to providing an equal learning, working and living environment at UCLA and supports a range of programs to promote these goals campus-wide. UCLA GRIT Coaching Program : https://www.grit.ucla.edu/ GRIT stands for Guidance, Resilience, Integrity and Transformation. In this program, UCLA students receive individualized support from trained peer coaches to manage stress, foster positive social connections, set goals, and navigate campus resources. Resources for Students Dealing with Financial Stress Economic Crisis Response : https://www.studentincrisis.ucla.edu/Economic-Crisis-Response provides support and guidance to students who have self-identified, or are identified by UCLA faculty or staff, as experiencing a financial crisis that impacts their academic success at UCLA. Bruin Shelter : http://www.bruinshelter.org/ provides a safe, supportive environment for fellow college students experiencing homelessness by fostering a collaborative effort between universities, community-based organizations, and service providers. The CPO Food Closet : http://www.cpo.ucla.edu/cpo/foodcloset/ provides free food for any UCLA student who may be experiencing hunger and/or struggling to attain food due to financial hardships.","title":"\ud83d\udcdc Syllabus"},{"location":"syllabus/#syllabus","text":"","title":"\ud83d\udcdc Syllabus"},{"location":"syllabus/#fall-2024","text":"Broad 4240 Tuesdays and Thursdays, 2 p.m. - 4:50 p.m. INSTRUCTOR - Hua Chai (he/they) Office hours: By appointment only; Thursdays, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: huazzers@g.ucla.edu TEACHING ASSISTANT - Sagan Yee (he/they) Office hours: By appointment only; Tuesdays, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: saganyee@ucla.edu","title":"Fall 2024"},{"location":"syllabus/#course-description","text":"This course introduces the fundamentals of programming interactive projects in game development software. Classwork focuses on familiarizing students with game engines, computer programming concepts, player experience, and other skills that are foundational to making digital games. Lectures, exercises, and class projects teach skills needed to create digital games including custom rules, interactive physics systems, vectors, generative or randomized levels, save data, custom input systems, score-keeping, and sound. This course is offered in parallel with the concurrent courses, Game Design and Interactive Animation.","title":"Course Description"},{"location":"syllabus/#course-prerequisites","text":"DESMA 24 Motion DESMA 101 Media Arts Introduction / DESMA 104 Design Futures This course will be heavy on C# scripting in Unity scripting API. If you haven't fulfilled the above pre-requisites but have prior experience in either writing code or using the Unity game engine , please let me know.","title":"Course Prerequisites"},{"location":"syllabus/#learning-outcomes","text":"By the end of this course, you will be able to create a real-time, interactive software with custom rules, generative or randomized levels, save data, responsive controls, physics, sound, and simple animation. The skills you will learn in this class translate well to immersive media, generative animation, and other modes of human-computer expression.","title":"Learning Outcomes"},{"location":"syllabus/#course-outline","text":"","title":"Course Outline"},{"location":"syllabus/#unit-1-generative-computation","text":"Using generative design to create random/unique/dynamic ecosystems, worlds, characters, and events in Unity. Week 0-3 Intro to Unity Game Engine and C# , Vector fundamentals , Prefabs and Instantiation , Arrays and Randomness, UI Project 1: Auto-Generator","title":"Unit 1: Generative Computation"},{"location":"syllabus/#unit-2-playing-with-physics","text":"Using physics, math, and other game engine tools to design environments and mechanics for interactive gameplay. Week 4-6 Level Design , Input Systems , Physics Simulations , Static Variables and Singletons, Sound Project 2: Ball Game Remix","title":"Unit 2: Playing with Physics"},{"location":"syllabus/#intermission-alt-engines","text":"Explore other tiny game engines! Week 7 Micro Game Jam(s) -- Make an entire game in a single class.","title":"Intermission: Alt-Engines"},{"location":"syllabus/#unit-3-save-scene","text":"Using persistent data, effects, and cinematic affordances of the game engine to revise and refine your projects. Week 8-10 Cinemachine, Animation, Coroutines, Persistent Data Project 3: Final Project (TBD)","title":"Unit 3: Save &amp;&amp; Scene"},{"location":"syllabus/#assignments-and-grading","text":"See How To Submit on instructions for submitting Unity projects","title":"Assignments and Grading"},{"location":"syllabus/#course-breakdown","text":"Project 1: 15% Project 2: 25% Project 3: 25% Reading / Homeplay responses: 15% Participation / Attendance: 20%","title":"Course Breakdown"},{"location":"syllabus/#evaluation-criteria","text":"","title":"Evaluation Criteria"},{"location":"syllabus/#projects","text":"Considering the likelihood that everyone is coming in with different skillsets and coding experiences, the expectation for this class is that you approach each project with your own level of skill and comfort in mind. Design a project for yourself that pushes your technical skills a little bit , but also allows you to lean into your existing strengths and practices. We will evaluate your projects based on: Timely submission Did you submit your project on time? (see Late Work for more details.) Completion of Project Deliverables Does your project meet the requirements of the assignment? Attention to detail and craft Does the project run? Are there unintended bugs, glitches, etc. Project scope / aesthetic and technical ambition Are you doing the bare minimum, or are you pushing yourself technically and/or aesthetically? Creative risk-taking and resourcefulness Are you pushing the limits of the tools? Hacky solutions are perfectly acceptable and encouraged!","title":"Projects"},{"location":"syllabus/#readings-homeplays","text":"You will be assigned occasional readings and games that are related to this course, accompanied by a questionnaire for you to complete and bring to class. These are graded pass/fail -- if you did the work, you will get full credit.","title":"Readings / Homeplays"},{"location":"syllabus/#participation-attendance","text":"This is an in-person course , so please come to class on time. We will be covering a lot of content quickly, so it is very important that you are present for each day. If you are more than 15 minutes late, you will be marked as late. Three late marks results in an unexcused absence. Any disputes should be discussed with the TA within two weeks If you anticipate having to miss class, email the TA prior to the class. Absences will not be excused after the fact, except in extreme circumstances. You get one unexcused absence before it starts affecting your grade. Each unexcused absence that follows will result in one full letter grade deduction from your participation score. Your participation grade will also be determined by your level of engagement in class. If you seem disengaged or are disruptive in class, we will reach out and discuss the matter with you. If a pattern of disruption or disengagement continues, we will be taking note and it will be reflected in your grade.","title":"Participation / Attendance"},{"location":"syllabus/#other-assignment-related-rules","text":"","title":"Other assignment-related rules"},{"location":"syllabus/#late-work","text":"On the day the project is due: Projects should be ready to play prior to the beginning of class. Project files and documentation should be submitted by 11:59PM the same day. After the due date, a full letter grade will be deducted from the project grade for each class day that the assignment is late. If you anticipate that you won\u2019t be able to complete the work by the due date, please contact us before the due date so we can discuss options.","title":"Late Work"},{"location":"syllabus/#appropriation-fair-use-and-generated-content","text":"You should strive to develop your own assets for your project submissions. The use of existing prompt-based AI generation programs, including but not limited to ChatGPT, DALLE, Stable Diffusion, and Midjourney, is not allowed in this class. You may consider this to be one of the limitations of this class -- you are here to learn a specific set of technical skills, and the most advisable way to engage with this course is to not use these programs at all. There are many other reliable solutions and resources available to you, please use this opportunity to explore them. If you're planning to borrow or generate assets from somewhere else, you must consult the instructor beforehand AND be able to justify your decision for doing so. While developing early stage prototypes and testing mechanics, it is acceptable to use placeholder assets. No credit will be awarded for plagiarised work. All submitted projects should be original and developed within the duration of this class. Remember to acknowledge / cite your tools and sources appropriately in your submission.","title":"Appropriation, Fair Use, and Generated Content"},{"location":"syllabus/#resources","text":"","title":"Resources"},{"location":"syllabus/#readings-games","text":"All assigned readings and games will be provided for you -- no need to purchase textbooks for this class. (see Readings & Homeplays for more details.)","title":"Readings / Games"},{"location":"syllabus/#required-tools","text":"Unity -- Please install Unity Hub and get the latest LTS version of Unity Editor (currently 2022.3.43f1). Other editor versions may differ slightly from each other, but anything 2021 or later should be ok. Visual Studio -- Install Microsoft Visual Studio or Visual Studio Code, you should have the option to do this when installing Unity.","title":"Required Tools"},{"location":"syllabus/#recommended-tools","text":"2D and 3D production software of your choice: Krita -- professional free and open source digital paint tool. Blender -- powerful free and open source 3D art and animation tool. Piskel -- free pixel art app. Aseprite -- inexpensive pixel art and animation tool. Sculptris -- \u201cA gateway into the exciting world of 3D.\u201d Crocotile 3d -- A tool for creating 3d scenes with 2d tiles. Mixamo -- Free, but requires a login. Includes community sourced walk cycles and 3D animations which you can apply to any model that can T-pose. Audio resources: freesound.org -- audio database that has search filters sorted by licenses. login required for downloading files. good source for adding sound effects and music to your projects. Audacity -- free software for recording and editing audio; the version without Muse Hub should suffice for your purposes. For more asset creation tools, check out this exhaustive list of cheap and free tools compiled by Everest Pipkin . Additional resources for C# scripting and Unity development: Unity documentation -- Scripting Reference and Editor Manual . Community Forums -- Stack Exchange , Unity Discussions . Learn C# in One Day and Learn it Well by Jamie Chan.","title":"Recommended Tools"},{"location":"syllabus/#campus-wide-resources-and-information","text":"","title":"Campus-wide resources and information"},{"location":"syllabus/#land-acknowledgement","text":"The University of California, Los Angeles occupies the ancestral, traditional, and contemporary Lands of the Tongva and Chumash peoples. Our ability to gather and learn here is the result of coercion, dispossession, and colonization. We are grateful for the land itself and the people that have stewarded it through generations. While a land acknowledgment is not enough, it is the first step in the work toward supporting decolonial and indigenous movements for sovereignty and self-determination. Read more about what land you\u2019re occupying: https://native-land.ca/ Other resources on land repatriation: UCLA Mapping Indigenous LA -- an online archive of a storymapping research project about indigenous Los Angeles peoples, histories, and geographies from past and present. California History (Winter 2023), Respecting the Ancestors: On Repatriating American Indian Remains -- 2023 essay report on the history of repatriating indigenous peoples remains (mostly a lack thereof), including UC-specific case studies. Decolonization is not a metaphor -- article on what is unsettling about decolonisation as a caution against the loose use of the term in advocacy and scholarship.","title":"Land Acknowledgement"},{"location":"syllabus/#commitment-to-diversity-safer-spaces","text":"We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students, TA, and instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the instructor or TA. (Statement adopted from voidLab at https://github.com/voidlab/diversity-statement )","title":"Commitment to Diversity &amp; Safer Spaces"},{"location":"syllabus/#covid-19","text":"It is important that everyone stay safe and avoid coming to class if you have any concerns about your health status. If you find that external struggles and/or COVID related challenges are affecting your ability to attend class, please reach out to us. We want you to be successful in the class, but we care about your well-being more than anything else. Open communication with us is most important in this regard, please let us know if you're sick and/or require additional accommodations. Students must adhere to the current campus directives related to COVID-19 mitigation, and refusal to do so may result in the student being asked to leave the classroom or referred to the Dean of Students. For more information about COVID-19 requirements on campus, please visit: https://covid-19.ucla.edu/information-for-students/ .","title":"COVID-19"},{"location":"syllabus/#center-for-accessible-education-cae","text":"The UCLA Center for Accessible Education (CAE) is responsible for ensuring students with documented disabilities have access to an inclusive, supportive learning environment. Students with disabilities or other needs requiring academic accommodations should speak with me as early in the quarter as possible to be sure they get the support they need. Students needing academic accommodations based on a disability should contact the Center for Accessible Education (CAE) at (310) 825-1501 or in person at Murphy Hall A255. When possible, students should contact the CAE within the first two weeks of the term as reasonable notice is needed to coordinate accommodations. For more information visit www.cae.ucla.edu .","title":"Center for Accessible Education (CAE)"},{"location":"syllabus/#academic-integrity-and-information-on-student-conduct","text":"UCLA is a community of scholars. In this community, all members including faculty, staff and students alike are responsible for maintaining standards of academic honesty. As a student and member of the University community, you are here to get an education and are, therefore, expected to demonstrate integrity in your academic endeavors. You are evaluated on your own merits. Cheating, plagiarism, collaborative work, multiple submissions without the permission of the professor, or other kinds of academic dishonesty are considered unacceptable behavior and will result in formal disciplinary proceedings usually resulting in suspension or dismissal. As specified in the UCLA Student Conduct Code , violations or attempted violations of academic dishonesty include, but are not limited to, cheating, fabrication, plagiarism, multiple submissions or facilitating academic dishonesty. When a student is suspected to have engaged in academic dishonesty, Academic Senate regulations require that the instructor report the allegation to the office of the Dean of Students. For more information, see the UCLA Student Conduct Code .","title":"Academic Integrity and Information on Student Conduct"},{"location":"syllabus/#title-ix","text":"UCLA prohibits gender discrimination, including sexual harassment, domestic and dating violence, sexual assault, and stalking. If you have experienced sexual harassment or sexual violence, there are a variety of resources to assist you.","title":"TITLE IX"},{"location":"syllabus/#confidential-resources","text":"You can receive confidential support and advocacy at the CARE Advocacy Office for Sexual and Gender-Based Violence, 1st Floor Wooden Center West, CAREadvocate@careprogram.ucla.edu , (310) 206-2465. Counseling and Psychological Services (CAPS) also provides confidential counseling to all students and can be reached 24/7 at (310) 825-0768.","title":"Confidential Resources"},{"location":"syllabus/#non-confidential-resources","text":"You can also report sexual violence or sexual harassment directly to the University\u2019s Title IX Coordinator, 2241 Murphy Hall, titleix@conet.ucla.edu , (310) 206-3417. Reports to law enforcement can be made to UCPD at (310) 825-1491. These offices may be required to pursue an official investigation. Faculty and TAs are required under the UC Policy on Sexual Violence and Sexual Harassment to inform the Title IX Coordinator\u2014A NON-CONFIDENTIAL RESOURCE\u2014should they become aware that you or any other student has experienced sexual violence or sexual harassment.","title":"Non-Confidential Resources"},{"location":"syllabus/#psychological-health-well-being-and-resilience","text":"UCLA is renowned for academic excellence, and yet we know that many students feel overwhelmed at times by demands to succeed academically, socially and personally. Our campus community is committed to helping all students thrive, learn to cope with stress, and build resilience. Remember, self-care is a skill that is critical to your long-term success. Here are some of the many resources available at UCLA to support you: Counseling and Psychological Services (CAPS) : https://www.counseling.ucla.edu/ Provides counseling and other psychological/mental health services to students. Walk-in hours are Monday-Thursday 8am-4:30pm and Friday 9am-4:30pm in John Wooden Center West. Crisis counseling is also available 24 hours/day at (310) 825-0768. Ashe Student Health and Wellness Center : http://www.studenthealth.ucla.edu Provides high quality and accessible ambulatory healthcare and education by caring professionals to support the academic success and personal development of all UCLA students. Healthy Campus Initiative (HCI) : https://healthy.ucla.edu Provides links to a wide variety of resources for enhancing physical and psychological well-being, positive social interactions, healthy sleep, healthy eating, healthy physical activity and more. Campus and Student Resilience : https://www.resilience.ucla.edu/ Provides programs to promote resilience and trains students to help support their peers. UCLA Recreation : https://www.recreation.ucla.edu/ Offers a broad array of services and programs including fitness, yoga, dance, martial arts, meditation, sports, and much more. Equity, Diversity and Inclusion : https://equity.ucla.edu/ Committed to providing an equal learning, working and living environment at UCLA and supports a range of programs to promote these goals campus-wide. UCLA GRIT Coaching Program : https://www.grit.ucla.edu/ GRIT stands for Guidance, Resilience, Integrity and Transformation. In this program, UCLA students receive individualized support from trained peer coaches to manage stress, foster positive social connections, set goals, and navigate campus resources.","title":"Psychological Health, Well-Being and Resilience"},{"location":"syllabus/#resources-for-students-dealing-with-financial-stress","text":"Economic Crisis Response : https://www.studentincrisis.ucla.edu/Economic-Crisis-Response provides support and guidance to students who have self-identified, or are identified by UCLA faculty or staff, as experiencing a financial crisis that impacts their academic success at UCLA. Bruin Shelter : http://www.bruinshelter.org/ provides a safe, supportive environment for fellow college students experiencing homelessness by fostering a collaborative effort between universities, community-based organizations, and service providers. The CPO Food Closet : http://www.cpo.ucla.edu/cpo/foodcloset/ provides free food for any UCLA student who may be experiencing hunger and/or struggling to attain food due to financial hardships.","title":"Resources for Students Dealing with Financial Stress"},{"location":"w0-unity-csharp/","text":"Intro to Game Engine, Unity, and C# What is a Game Engine? Let's break this question down. First of all... What is a Game? A game is an experience, and that experience has a certain character. [...] And if we\u2019re discussing an experience, then that implies someone is there to have that experience, someone we refer to as a player. We can\u2019t talk about a game without talking about the experience of the player playing that game, even if the playing experience we\u2019re talking about is often our own. The experience we call a game is created by the interaction between different rules , but the rules themselves aren\u2019t the game, the interaction is! A game can\u2019t exist without a player or players : someone needs to be engaging with the rules for the experience to happen. -- Chapter Three, Rise of the Videogame Zinesters. Anna Anthropy. For example, in a game of tag, what are the rules for... THE SETUP -- how do you decide who's \"it\"? when can they start tagging people? THE LEVEL / PLAYING FIELD -- how far can players go before they're \"out-of-bounds\"? are there safe zones where people can't be tagged? PLAYER BEHAVIOUR -- are players only allowed to travel in a certain manner (e.g. speedwalking, but no running), and how can that be enforced (e.g. speedwalking means both feet cannot be lifted off the ground at the same time at any moment.) If someone gets tagged, what happens to them? Do they freeze in position, become \"it\", or are they out of the game? CONCLUDING THE EXPERIENCE -- how do you know when the game has ended, and who the winner/loser is (if any)? \"Is xxx a game?\" -- is this a game? by sweetfish on itch.io. Technically, this question is irrelevant to this class. Regardless of what you end up making for your assignments, you'll eventually have to make decisions about the parameters and conditions of your project (which you could think of as being \"the rules of your game\") and consider how one's interaction / encounter of these \"rules\" will affect their overall experience of it. In this class, we will focus on how to implement these rules using game engines , so that you can explore its creative affordances for designing particular experiences. What is an Engine? -- Marine Diesel Engine Animation GIF ( Source ) -- Animation of Eadweard Muybridge\u2019s Jockey riding a race horse from his \u2018Animal Locomotion\u2019 series, 1878/87 / J. Paul Getty Museum, Los Angeles, USA / Bridgeman Images Consider the following definitions from the Wikitionary page for \"Engine\" : \"A complex mechanical device which converts energy into useful motion or physical effects.\" In a mechanical sense, an engine is an energy converter that can transform certain type(s) of input into other type(s) of \"productive\" output. \"A person or group of people which influence a larger group; a driving force.\" \"Anything used to effect a purpose; any device or contrivance; an agent.\" In an abstract sense, an engine is an information carrier that can contain, transfer, and transform ideas, beliefs, and principles. \"A large construction used in warfare, such as a battering ram, catapult etc. [from 14th c.]\" \"The part of a car or other vehicle which provides the force for motion, now especially one powered by internal combustion. [from 19th c.]\" From a historical and infrastructural standpoint, an engine is a catalyst of both the production and destruction of worlds, societies, and cultures. \"A software or hardware system responsible for a specific technical task (usually with qualifying word).\" a graphics engine; a physics engine. In computing, an engine is a specialised machine for performing a specific task. In this class, we will be mostly using software programs designed specifically for game development... but really, anything can be a \"game engine.\" It is also worth considering the various contexts in which the engine emerges, so that we can better grasp the possibilities and implications of this technology, and then decide how and where we would like to proceed with this tool. Put them together... GAME ENGINE! Returning to our first question: What is a game engine? -- guess we doin games now by morry kolman (@WTTDOTM) Tools designed specifically for developing games (e.g. Unity, Bitsy , PICO-8 , in-game level builders ) Platforms which primarily serve some other non-game-making function (if any at all), but are nonetheless used for making games. (e.g. Spread sheets , Checkboxes , Post-war junkyards and bombsites ) -- When Play Is Criminalized: Racial Disparities in Childhood . Eisa Nefertari Ulen, TRUTHOUT. If a game is \"an experience that is made from the interaction between different rules\" , then broadly speaking, a game engine could be anything that converts rules and interaction into playable experiences. Unity is a Game Engine We'll spend most of this course working in the Unity game engine. Unity, initially released in 2005, is a closed-source game engine, and Unity Technologies, the developer of the engine, has been a publicly traded company since 2020. The engine gained popularity through being free for small, independent developers, with a relatively easy learning curve. Compared to most other game engines, Unity also tries to avoid being aesthetically identifiable and not be tied to a particular genre of game. Other industries use Unity for things like Architectural and Auto rendering, Film and TV production , AI training and computer vision . Unity also contracts with the US Department of Defense for military training and simulation. Anatomy of the Unity Editor -- Unity Editor window in default workspace layout Read the following articles from the Unity User Manual: Unity's interface GameObjects Transforms Using Components Unity C# Unity uses C#, a type of object-oriented language , as one of its primary scripting languages. We typically write Unity C# scripts to make customised blueprints for accessing, organising, and implementing data inside our game project. This is helpful for: storing information such as variables and functions inside an object or class ; programming interactive / dynamic behaviour in objects; MonoBehaviours Most of the time, we're working with a class called MonoBehaviour which behaves like a component that can be attached to any gameobject in our scene. Whenever we make a new C# script in Unity, we are creating custom classes that inherit from another class called MonoBehaviour by default. This allows us to use the methods and functionality from the MonoBehaviour class. public class NewBehaviour : Monobehaviour{...} Let's create a Unity C# script! When writing any sort of code, here's the general thought process: OUTPUT -- \"I need my script to do THIS ...\" INPUT -- \"... so I need to access THESE VARIABLES ...\" METHOD -- \"... and call THESE FUNCTIONS in order of THIS SEQUENCE .\" It is very common to start by looking for solutions on Unity's Documentation page or other community forums. There is no expectation to memorise every single thing -- the longer you work in Unity, the more familiar you become with its interface and workflow, and you'll eventually find yourself not needing to look things up as often as you used to. Anatomy of a C# Script If you are new to coding in C# , watch this video for a brief introduction to C# Variables and Functions in Unity. Naming your C# Scripts use pascal case , (i.e. first alphabetical letter is capitalised, and every new word is marked with a capitalised case, no spaces.) e.g. MyScript.cs the file name of the script and the name of the MonoBehaviour must be exactly the same (case-sensitive) . e.g. if your C# file name is \"ScoreManager.cs\", then the line declaring your Monobehaviour class in that script file should look like this: public class ScoreManager : MonoBehaviour {...} the name must be unique -- no two MonoBehaviours should have the same name. Namespaces A C# script typically starts with a list of namespaces, which are reference libraries containing all the methods and classes for a specific context. The name of each namespace is typically placed after using . using UnityEngine Variables and Functions Each class has a block of code that defines what its properties (aka variables) and methods (aka functions) are. These properties and methods should be enclosed within the curly braces for that class. public class MyNewScript : MonoBehaviour { public int someProperty; void SomeMethod() { } } Variables Variables are labelled data containers that represent properties for that class. These variables can be assigned values, and whose read/write access can be set by declaring them as public or private. Most properties in a component are likely accessible in some way via scripting (to learn more, Unity scripting reference is your best friend!) When creating variables: declare access permissions in lowercase (default: private ) declare what type of variable it is float - a numerical value that can be in decimals int - a numerical integer (whole numbers only) bool - binary property that can be either assigned 'true' or 'false' string - a sequence of characters other public classes including GameObject and components (e.g. Transform ) name the variable no spaces allowed. use camel case. int numberOfCamels use clear and descriptive nouns, the intent of this variable should be immediately apparent from its name if it is a bool, prefix with a verb (typically phrase as a question.) bool isWalking, hasSpecialAbility; use prefixes with an underscore to differentiate private member variables from public ones. private bool _currentHealth; private static int s_winScore; Functions There are two main types of functions: method functions -- a way to group lines of code under one name; good for if you need to call a specific set of codes multiple times; event functions -- automatically tells Unity what to do at very particular instances in the game. Functions may take in variables as arguments, which can be passed in parentheses () and each separated by a comma. When creating functions: declare access permissions in lowercase (default: private ) what type of value it returns in lowercase (if any) -- void returns no value. name of the function in pascal case, followed by parenthesis containing any argument variables. float MultiplyByTwo(float initialFloat){...} Key principles of Programming in Unity C# Single Responsibility -- Every module of code (class, function, etc.) should have a one and only purpose in the software functionality. This will be very helpful for: debugging scripts making your scripts easily reusable for other projects. Keep everything private unless it absolutely needs to be public. if a variable just needs to be visible in the Inspector but does not need to be publicly accessible, you should keep it private then add [SerializeField] before it. [SerializeField] bool _currentIndex; Anticipate errors, and help your script help you catch them if your script absolutely needs a type of component, precede your Monobehaviour declaration with [RequireComponent(typeof(ComponentName))] use Debug.Log and Debug.LogError to check for incorrect / null references. Use comments to contextualise your lines of code Exercise before next class Can you write a script that forces a GameObject to start at a specific position in the scene?","title":"Intro to Game Engine, Unity, and C&#35;"},{"location":"w0-unity-csharp/#intro-to-game-engine-unity-and-c","text":"","title":"Intro to Game Engine, Unity, and C&#35;"},{"location":"w0-unity-csharp/#what-is-a-game-engine","text":"Let's break this question down. First of all...","title":"What is a Game Engine?"},{"location":"w0-unity-csharp/#what-is-a-game","text":"A game is an experience, and that experience has a certain character. [...] And if we\u2019re discussing an experience, then that implies someone is there to have that experience, someone we refer to as a player. We can\u2019t talk about a game without talking about the experience of the player playing that game, even if the playing experience we\u2019re talking about is often our own. The experience we call a game is created by the interaction between different rules , but the rules themselves aren\u2019t the game, the interaction is! A game can\u2019t exist without a player or players : someone needs to be engaging with the rules for the experience to happen. -- Chapter Three, Rise of the Videogame Zinesters. Anna Anthropy. For example, in a game of tag, what are the rules for... THE SETUP -- how do you decide who's \"it\"? when can they start tagging people? THE LEVEL / PLAYING FIELD -- how far can players go before they're \"out-of-bounds\"? are there safe zones where people can't be tagged? PLAYER BEHAVIOUR -- are players only allowed to travel in a certain manner (e.g. speedwalking, but no running), and how can that be enforced (e.g. speedwalking means both feet cannot be lifted off the ground at the same time at any moment.) If someone gets tagged, what happens to them? Do they freeze in position, become \"it\", or are they out of the game? CONCLUDING THE EXPERIENCE -- how do you know when the game has ended, and who the winner/loser is (if any)?","title":"What is a Game?"},{"location":"w0-unity-csharp/#is-xxx-a-game","text":"-- is this a game? by sweetfish on itch.io. Technically, this question is irrelevant to this class. Regardless of what you end up making for your assignments, you'll eventually have to make decisions about the parameters and conditions of your project (which you could think of as being \"the rules of your game\") and consider how one's interaction / encounter of these \"rules\" will affect their overall experience of it. In this class, we will focus on how to implement these rules using game engines , so that you can explore its creative affordances for designing particular experiences.","title":"\"Is xxx a game?\""},{"location":"w0-unity-csharp/#what-is-an-engine","text":"-- Marine Diesel Engine Animation GIF ( Source ) -- Animation of Eadweard Muybridge\u2019s Jockey riding a race horse from his \u2018Animal Locomotion\u2019 series, 1878/87 / J. Paul Getty Museum, Los Angeles, USA / Bridgeman Images Consider the following definitions from the Wikitionary page for \"Engine\" : \"A complex mechanical device which converts energy into useful motion or physical effects.\" In a mechanical sense, an engine is an energy converter that can transform certain type(s) of input into other type(s) of \"productive\" output. \"A person or group of people which influence a larger group; a driving force.\" \"Anything used to effect a purpose; any device or contrivance; an agent.\" In an abstract sense, an engine is an information carrier that can contain, transfer, and transform ideas, beliefs, and principles. \"A large construction used in warfare, such as a battering ram, catapult etc. [from 14th c.]\" \"The part of a car or other vehicle which provides the force for motion, now especially one powered by internal combustion. [from 19th c.]\" From a historical and infrastructural standpoint, an engine is a catalyst of both the production and destruction of worlds, societies, and cultures. \"A software or hardware system responsible for a specific technical task (usually with qualifying word).\" a graphics engine; a physics engine. In computing, an engine is a specialised machine for performing a specific task. In this class, we will be mostly using software programs designed specifically for game development... but really, anything can be a \"game engine.\" It is also worth considering the various contexts in which the engine emerges, so that we can better grasp the possibilities and implications of this technology, and then decide how and where we would like to proceed with this tool.","title":"What is an Engine?"},{"location":"w0-unity-csharp/#put-them-together-game-engine","text":"Returning to our first question:","title":"Put them together... GAME ENGINE!"},{"location":"w0-unity-csharp/#what-is-a-game-engine_1","text":"-- guess we doin games now by morry kolman (@WTTDOTM) Tools designed specifically for developing games (e.g. Unity, Bitsy , PICO-8 , in-game level builders ) Platforms which primarily serve some other non-game-making function (if any at all), but are nonetheless used for making games. (e.g. Spread sheets , Checkboxes , Post-war junkyards and bombsites ) -- When Play Is Criminalized: Racial Disparities in Childhood . Eisa Nefertari Ulen, TRUTHOUT. If a game is \"an experience that is made from the interaction between different rules\" , then broadly speaking, a game engine could be anything that converts rules and interaction into playable experiences.","title":"What is a game engine?"},{"location":"w0-unity-csharp/#unity-is-a-game-engine","text":"We'll spend most of this course working in the Unity game engine. Unity, initially released in 2005, is a closed-source game engine, and Unity Technologies, the developer of the engine, has been a publicly traded company since 2020. The engine gained popularity through being free for small, independent developers, with a relatively easy learning curve. Compared to most other game engines, Unity also tries to avoid being aesthetically identifiable and not be tied to a particular genre of game. Other industries use Unity for things like Architectural and Auto rendering, Film and TV production , AI training and computer vision . Unity also contracts with the US Department of Defense for military training and simulation.","title":"Unity is a Game Engine"},{"location":"w0-unity-csharp/#anatomy-of-the-unity-editor","text":"-- Unity Editor window in default workspace layout Read the following articles from the Unity User Manual: Unity's interface GameObjects Transforms Using Components","title":"Anatomy of the Unity Editor"},{"location":"w0-unity-csharp/#unity-c","text":"Unity uses C#, a type of object-oriented language , as one of its primary scripting languages. We typically write Unity C# scripts to make customised blueprints for accessing, organising, and implementing data inside our game project. This is helpful for: storing information such as variables and functions inside an object or class ; programming interactive / dynamic behaviour in objects;","title":"Unity C&#35;"},{"location":"w0-unity-csharp/#monobehaviours","text":"Most of the time, we're working with a class called MonoBehaviour which behaves like a component that can be attached to any gameobject in our scene. Whenever we make a new C# script in Unity, we are creating custom classes that inherit from another class called MonoBehaviour by default. This allows us to use the methods and functionality from the MonoBehaviour class. public class NewBehaviour : Monobehaviour{...}","title":"MonoBehaviours"},{"location":"w0-unity-csharp/#lets-create-a-unity-c-script","text":"When writing any sort of code, here's the general thought process: OUTPUT -- \"I need my script to do THIS ...\" INPUT -- \"... so I need to access THESE VARIABLES ...\" METHOD -- \"... and call THESE FUNCTIONS in order of THIS SEQUENCE .\" It is very common to start by looking for solutions on Unity's Documentation page or other community forums. There is no expectation to memorise every single thing -- the longer you work in Unity, the more familiar you become with its interface and workflow, and you'll eventually find yourself not needing to look things up as often as you used to.","title":"Let's create a Unity C&#35; script!"},{"location":"w0-unity-csharp/#anatomy-of-a-c-script","text":"If you are new to coding in C# , watch this video for a brief introduction to C# Variables and Functions in Unity.","title":"Anatomy of a C&#35; Script"},{"location":"w0-unity-csharp/#naming-your-c-scripts","text":"use pascal case , (i.e. first alphabetical letter is capitalised, and every new word is marked with a capitalised case, no spaces.) e.g. MyScript.cs the file name of the script and the name of the MonoBehaviour must be exactly the same (case-sensitive) . e.g. if your C# file name is \"ScoreManager.cs\", then the line declaring your Monobehaviour class in that script file should look like this: public class ScoreManager : MonoBehaviour {...} the name must be unique -- no two MonoBehaviours should have the same name.","title":"Naming your C# Scripts"},{"location":"w0-unity-csharp/#namespaces","text":"A C# script typically starts with a list of namespaces, which are reference libraries containing all the methods and classes for a specific context. The name of each namespace is typically placed after using . using UnityEngine","title":"Namespaces"},{"location":"w0-unity-csharp/#variables-and-functions","text":"Each class has a block of code that defines what its properties (aka variables) and methods (aka functions) are. These properties and methods should be enclosed within the curly braces for that class. public class MyNewScript : MonoBehaviour { public int someProperty; void SomeMethod() { } }","title":"Variables and Functions"},{"location":"w0-unity-csharp/#variables","text":"Variables are labelled data containers that represent properties for that class. These variables can be assigned values, and whose read/write access can be set by declaring them as public or private. Most properties in a component are likely accessible in some way via scripting (to learn more, Unity scripting reference is your best friend!) When creating variables: declare access permissions in lowercase (default: private ) declare what type of variable it is float - a numerical value that can be in decimals int - a numerical integer (whole numbers only) bool - binary property that can be either assigned 'true' or 'false' string - a sequence of characters other public classes including GameObject and components (e.g. Transform ) name the variable no spaces allowed. use camel case. int numberOfCamels use clear and descriptive nouns, the intent of this variable should be immediately apparent from its name if it is a bool, prefix with a verb (typically phrase as a question.) bool isWalking, hasSpecialAbility; use prefixes with an underscore to differentiate private member variables from public ones. private bool _currentHealth; private static int s_winScore;","title":"Variables"},{"location":"w0-unity-csharp/#functions","text":"There are two main types of functions: method functions -- a way to group lines of code under one name; good for if you need to call a specific set of codes multiple times; event functions -- automatically tells Unity what to do at very particular instances in the game. Functions may take in variables as arguments, which can be passed in parentheses () and each separated by a comma. When creating functions: declare access permissions in lowercase (default: private ) what type of value it returns in lowercase (if any) -- void returns no value. name of the function in pascal case, followed by parenthesis containing any argument variables. float MultiplyByTwo(float initialFloat){...}","title":"Functions"},{"location":"w0-unity-csharp/#key-principles-of-programming-in-unity-c","text":"Single Responsibility -- Every module of code (class, function, etc.) should have a one and only purpose in the software functionality. This will be very helpful for: debugging scripts making your scripts easily reusable for other projects. Keep everything private unless it absolutely needs to be public. if a variable just needs to be visible in the Inspector but does not need to be publicly accessible, you should keep it private then add [SerializeField] before it. [SerializeField] bool _currentIndex; Anticipate errors, and help your script help you catch them if your script absolutely needs a type of component, precede your Monobehaviour declaration with [RequireComponent(typeof(ComponentName))] use Debug.Log and Debug.LogError to check for incorrect / null references. Use comments to contextualise your lines of code","title":"Key principles of Programming in Unity C&#35;"},{"location":"w0-unity-csharp/#exercise-before-next-class","text":"Can you write a script that forces a GameObject to start at a specific position in the scene?","title":"Exercise before next class"},{"location":"w1-1-transforms-vectors/","text":"hljs.highlightAll(); Transforms and Vectors \ud83d\udce6 Unity packages from today's class: In-class exercise: Solar System Transform and Vector Demos , including examples of: Forcing object to start at a given position Moving an object at constant velocity and at accelerating velocity Making at object follow another object using LateUpdate() Vector Multiplication Visualisation Before we begin... Review from last class GameObjects and Components C# Variables and Functions : How to declare and initialise a variable? How to write and call a custom method function? Event functions -- void Start() and void Update() Exercise from last class Can you write a script that forces a GameObject to start at a specific position in the scene? Transforms Read about Transforms in the Unity Manual. Every GameObject has a Transform component, which can be accessed via scripts using gameObject.GetComponent<Transform>() or gameObject.transform . Using the Transform component, you may access the following properties: Position , Rotation , and Scale Parent-Child Hierarchy Global and Local Transforms Vectors Read about Vector3 in the Unity Manual. A vector is a group of numbers -- a 2D vector contains two values (x, y), and a 3D vector contains three values (x, y, z). In Unity, 3D vectors are represented by a data structure called Vector3 , which contains three float values represented by x, y, and z respectively. Vector3(float x, float y, float z) When handling spatial and directional information in three dimensional contexts, we are typically working with Vector3 data structures. Vector3 variables and properties To declare and initialise a Vector3 variable: Vector3 someVector = new Vector3(2,4,5); // \"Vector3\" on the LEFT declares what type of variable \"someVector\" is; // \"new Vector3()\" on the RIGHT acts as a constructor method // that creates and initialises a new Vector3 with xyz-values (2, 4, and 5). Note: Even in 2D projects, transform properties are still stored as Vector3 data. In this context, you could choose to declare Vector3 variables in this way: someVector = new Vector3(2,4); // which is the same as \"new Vector3(2,4,0)\" (ie. z-value is 0) To access x, y, and z components of a Vector3: Debug.Log(someVector.x); Debug.Log(someVector.y); Debug.Log(someVector.z); In Unity, you can also use shorthands for calling specific 3D vectors. Vector3.zero //Vector3(0,0,0) Vector3.one //Vector3(1,1,1) Vector3.forward //Vector3(0,0,1) Vector3.right //Vector3(1,0,0) Vector3.up //Vector3(0,1,0) //etc. Using Vectors in Unity Vectors can represent position , scale , rotation , and direction of an object in space, relative to X, Y, and Z axes. Position Vector3 as spatial coordinates. Origin is at (0,0,0). Scale Vector3 as relative scale. Rotation Vector3 as rotational configuration. In Unity, rotation values are internally processed as Quarternion values, which are more convenient for the computer to work with. In the inspector, we are reading eulerAngle representations of rotation in degrees along the X, Y, and Z axes. Direction Vector3 as relative direction. Vector Math Operations Addition (+) Make an object move at a given velocity position += velocity * Time.deltaTime; Make an object move at an accelerated velocity velocity += acceleration * Time.deltaTime; position += velocity * Time.deltaTime; Make an object (e.g. camera) follow another object at a given offset Usually it's easier to do this by parenting one object to another, but sometimes that configuration just doesn't work for your purposes... In that case, you may consider using vector math! Unity's Roll-a-ball tutorial uses a similar technique for setting up a camera that follows the player object. //LateUpdate is another event function //that is called every frame, but after Update() void LateUpdate() { //follow target position at offset //AFTER target position changes in Update() gameObject.transform.position = target.position + offset; } Spawn objects at regular intervals We'll discuss this next class when we get into arrays and instantiation! Subtraction (-) Determine direction from one point to another fromAToB = B - A; //and if we just need the unit of this direction vector //we can normalize it. unitDirection = fromAToB.normalized; Determine the distance between 2 points fromAToB = B - A; float distanceAB = fromAToB.magnitude; //OR we can use the Vector3 method \"Distance()\" float distanceAB = Vector3.Distance(A,B); Multiplication (*) Scale the size / length of a vector someVector *= multiplier; Flipping a vector's direction someVector *= -1; Normalizing Vectors Normalized vectors always have a magnitude of 1. This is useful for when you're using vectors only for its directional orientation. normalizedVector = someVector.normalized; Dot Product Read about Vector3.Dot in the Unity Manual. Dot product is useful for comparing the directions of two different vectors. float dotProductAB = Vector3.Dot(A,B); if (dotProductAB==0){ //A and B are perpendicular } else if (dotProductAB==1){ //A and B are pointing in exactly the same direction } else if (dotProductAB==-1){ //A and B are pointing in completely opposite directions } Cross Product Read about Vector3.Cross in the Unity Manual. Cross product can produce a new vector that is perpendicular to two vectors. Vector3 OA = A - O; Vector3 OB = B = O; Vector3 crossAB = Vector3.Cross(OA,OB); //crossAB is perpendcular to both vectors OA and OB. Other vector methods that may be useful MoveTowards() RotateTowards() Reflect() In-class Exercise In Unity, build a solar system in orbit with a sun, planets, and moons... and only use scripts for animations! (Hint: Try using RotateAround() .) Exercise for next class How do we make a solar system that dynamically generates at the start of the scene: a random number of planets and moons; a set distance interval between each consecutive sibling planet? Some course reminders Fill up the preliminary course survey , if you haven't already. Reading Response 1 is due next class. Sign up for Homeplay 1 !","title":"W1 1 transforms vectors"},{"location":"w1-1-transforms-vectors/#transforms-and-vectors","text":"\ud83d\udce6 Unity packages from today's class: In-class exercise: Solar System Transform and Vector Demos , including examples of: Forcing object to start at a given position Moving an object at constant velocity and at accelerating velocity Making at object follow another object using LateUpdate() Vector Multiplication Visualisation Before we begin...","title":"Transforms and Vectors"},{"location":"w1-1-transforms-vectors/#review-from-last-class","text":"GameObjects and Components C# Variables and Functions : How to declare and initialise a variable? How to write and call a custom method function? Event functions -- void Start() and void Update()","title":"Review from last class"},{"location":"w1-1-transforms-vectors/#exercise-from-last-class","text":"Can you write a script that forces a GameObject to start at a specific position in the scene?","title":"Exercise from last class"},{"location":"w1-1-transforms-vectors/#transforms","text":"Read about Transforms in the Unity Manual. Every GameObject has a Transform component, which can be accessed via scripts using gameObject.GetComponent<Transform>() or gameObject.transform . Using the Transform component, you may access the following properties: Position , Rotation , and Scale Parent-Child Hierarchy Global and Local Transforms","title":"Transforms"},{"location":"w1-1-transforms-vectors/#vectors","text":"Read about Vector3 in the Unity Manual. A vector is a group of numbers -- a 2D vector contains two values (x, y), and a 3D vector contains three values (x, y, z). In Unity, 3D vectors are represented by a data structure called Vector3 , which contains three float values represented by x, y, and z respectively. Vector3(float x, float y, float z) When handling spatial and directional information in three dimensional contexts, we are typically working with Vector3 data structures.","title":"Vectors"},{"location":"w1-1-transforms-vectors/#vector3-variables-and-properties","text":"To declare and initialise a Vector3 variable: Vector3 someVector = new Vector3(2,4,5); // \"Vector3\" on the LEFT declares what type of variable \"someVector\" is; // \"new Vector3()\" on the RIGHT acts as a constructor method // that creates and initialises a new Vector3 with xyz-values (2, 4, and 5). Note: Even in 2D projects, transform properties are still stored as Vector3 data. In this context, you could choose to declare Vector3 variables in this way: someVector = new Vector3(2,4); // which is the same as \"new Vector3(2,4,0)\" (ie. z-value is 0) To access x, y, and z components of a Vector3: Debug.Log(someVector.x); Debug.Log(someVector.y); Debug.Log(someVector.z); In Unity, you can also use shorthands for calling specific 3D vectors. Vector3.zero //Vector3(0,0,0) Vector3.one //Vector3(1,1,1) Vector3.forward //Vector3(0,0,1) Vector3.right //Vector3(1,0,0) Vector3.up //Vector3(0,1,0) //etc.","title":"Vector3 variables and properties"},{"location":"w1-1-transforms-vectors/#using-vectors-in-unity","text":"Vectors can represent position , scale , rotation , and direction of an object in space, relative to X, Y, and Z axes.","title":"Using Vectors in Unity"},{"location":"w1-1-transforms-vectors/#position","text":"Vector3 as spatial coordinates. Origin is at (0,0,0).","title":"Position"},{"location":"w1-1-transforms-vectors/#scale","text":"Vector3 as relative scale.","title":"Scale"},{"location":"w1-1-transforms-vectors/#rotation","text":"Vector3 as rotational configuration. In Unity, rotation values are internally processed as Quarternion values, which are more convenient for the computer to work with. In the inspector, we are reading eulerAngle representations of rotation in degrees along the X, Y, and Z axes.","title":"Rotation"},{"location":"w1-1-transforms-vectors/#direction","text":"Vector3 as relative direction.","title":"Direction"},{"location":"w1-1-transforms-vectors/#vector-math-operations","text":"","title":"Vector Math Operations"},{"location":"w1-1-transforms-vectors/#addition","text":"","title":"Addition (+)"},{"location":"w1-1-transforms-vectors/#make-an-object-move-at-a-given-velocity","text":"position += velocity * Time.deltaTime;","title":"Make an object move at a given velocity"},{"location":"w1-1-transforms-vectors/#make-an-object-move-at-an-accelerated-velocity","text":"velocity += acceleration * Time.deltaTime; position += velocity * Time.deltaTime;","title":"Make an object move at an accelerated velocity"},{"location":"w1-1-transforms-vectors/#make-an-object-eg-camera-follow-another-object-at-a-given-offset","text":"Usually it's easier to do this by parenting one object to another, but sometimes that configuration just doesn't work for your purposes... In that case, you may consider using vector math! Unity's Roll-a-ball tutorial uses a similar technique for setting up a camera that follows the player object. //LateUpdate is another event function //that is called every frame, but after Update() void LateUpdate() { //follow target position at offset //AFTER target position changes in Update() gameObject.transform.position = target.position + offset; }","title":"Make an object (e.g. camera) follow another object at a given offset"},{"location":"w1-1-transforms-vectors/#spawn-objects-at-regular-intervals","text":"We'll discuss this next class when we get into arrays and instantiation!","title":"Spawn objects at regular intervals"},{"location":"w1-1-transforms-vectors/#subtraction-","text":"","title":"Subtraction (-)"},{"location":"w1-1-transforms-vectors/#determine-direction-from-one-point-to-another","text":"fromAToB = B - A; //and if we just need the unit of this direction vector //we can normalize it. unitDirection = fromAToB.normalized;","title":"Determine direction from one point to another"},{"location":"w1-1-transforms-vectors/#determine-the-distance-between-2-points","text":"fromAToB = B - A; float distanceAB = fromAToB.magnitude; //OR we can use the Vector3 method \"Distance()\" float distanceAB = Vector3.Distance(A,B);","title":"Determine the distance between 2 points"},{"location":"w1-1-transforms-vectors/#multiplication","text":"","title":"Multiplication (*)"},{"location":"w1-1-transforms-vectors/#scale-the-size-length-of-a-vector","text":"someVector *= multiplier;","title":"Scale the size / length of a vector"},{"location":"w1-1-transforms-vectors/#flipping-a-vectors-direction","text":"someVector *= -1;","title":"Flipping a vector's direction"},{"location":"w1-1-transforms-vectors/#normalizing-vectors","text":"Normalized vectors always have a magnitude of 1. This is useful for when you're using vectors only for its directional orientation. normalizedVector = someVector.normalized;","title":"Normalizing Vectors"},{"location":"w1-1-transforms-vectors/#dot-product","text":"Read about Vector3.Dot in the Unity Manual. Dot product is useful for comparing the directions of two different vectors. float dotProductAB = Vector3.Dot(A,B); if (dotProductAB==0){ //A and B are perpendicular } else if (dotProductAB==1){ //A and B are pointing in exactly the same direction } else if (dotProductAB==-1){ //A and B are pointing in completely opposite directions }","title":"Dot Product"},{"location":"w1-1-transforms-vectors/#cross-product","text":"Read about Vector3.Cross in the Unity Manual. Cross product can produce a new vector that is perpendicular to two vectors. Vector3 OA = A - O; Vector3 OB = B = O; Vector3 crossAB = Vector3.Cross(OA,OB); //crossAB is perpendcular to both vectors OA and OB.","title":"Cross Product"},{"location":"w1-1-transforms-vectors/#other-vector-methods-that-may-be-useful","text":"MoveTowards() RotateTowards() Reflect()","title":"Other vector methods that may be useful"},{"location":"w1-1-transforms-vectors/#in-class-exercise","text":"In Unity, build a solar system in orbit with a sun, planets, and moons... and only use scripts for animations! (Hint: Try using RotateAround() .)","title":"In-class Exercise"},{"location":"w1-1-transforms-vectors/#exercise-for-next-class","text":"How do we make a solar system that dynamically generates at the start of the scene: a random number of planets and moons; a set distance interval between each consecutive sibling planet?","title":"Exercise for next class"},{"location":"w1-1-transforms-vectors/#some-course-reminders","text":"Fill up the preliminary course survey , if you haven't already. Reading Response 1 is due next class. Sign up for Homeplay 1 !","title":"Some course reminders"},{"location":"w1-2-prefabs-loops-arrays/","text":"hljs.highlightAll(); Prefabs, Loops, Arrays \ud83d\udce6 Unity packages from today's class: Exercise from last class: Solar System Generator In-class exercise: Spawn Random Prefab at Random Position Spawn at random position within set maximum distance. Spawn at random position within set min-max range along X Y and Z axes. Spawn at random position selected from a given array of positions. Before we begin... Review from last class Transform component and its properties Vectors and how to use them Vector math operations and method functions Using vectors for procedural animation Exercise from last class How do we make a solar system that dynamically generates at the start of the scene: a random number of planets and moons; a set distance interval between each consecutive sibling planet? Prefabs Read about Prefabs in the Unity Manual. Prefabs allow you to store a GameObject and its information (including its components, property values, child objects, etc.) into your Unity project folder as a reusable Asset . This Prefab Asset can be used as a base template from which you can create and modify new Prefab instances in the scene. How to create a Prefab from an existing GameObject in the scene Click and drag the GameObject from the Scene Hierarchy into your project folder panel. The GameObject should now be marked with a blue icon, and have an arrow button to the right of its name that leads you to the Prefab editor. How to Instantiate a GameObject We use the Instantiate() method function to spawn new instances of a GameObject in our scene. Instantiate(someGameObject); You could also pass a GameObject instance into a GameObject variable . This allows you to reference it later in your script. GameObject obj = Instantiate(someGameObject); //let's say we want to change the position of this instance obj.transform.position = someVector; //or set it to a new parent obj.transform.parent = someParentObject; The Instantiate() method can also be called in other ways that allow you to pass multiple parameters at once . The Unity Scripting API lists all the different ways you can declare the Instantiate() function. For example: GameObject obj = Instantiate( spawnThisGameObject, //GameObject atSomePosition, //Vector3 atSomeQuaternionRotation, //Quaternion underSomeParent); //Transform Loops Loop functions allow you to repeat an action multiple times. Watch the Unity Tutorial below to learn about: While loops Do-while Loops For Loops ... and one more video about Foreach Loops . Arrays Read about Arrays in the Unity Manual. Arrays allow you to store multiple objects in a single variable . Each object in an array is attached to an index number, starting from 0 . This index number is used when calling this object from the array. string[] fruits = {\"apples\", \"pears\", \"oranges\"}; // fruits[0] will return \"apples\" // fruits[1] ... \"pears\" // fruits[2] ... \"oranges\" Every array has a Length property, which gives you the number elements in the array. string[] fruits = {\"apples\", \"pears\", \"oranges\"}; Debug.Log(\"Length of fruits array: \"+ fruits.Length); // console will print \"Length of fruits array: 3\". Arrays cannot be resized while the project is running. If you need to resize a container of objects, either recreate the array to resize it, or use a List instead. How to declare an array Declare the type of variable that is being stored in the array, followed by square brackets [] . float[] someFloats; // a private float array private Transform[] someTransforms; // a private Transform array public Vector3[] someVectors; // a public Vector3 array [SerializeField] GameObject[] someGameObjects; // a private GameObject array that is visible in the Inspector. You can initialise the array by: using an array constructor method in your scripts; // Creates an array with 5 empty elements int[] numbers = new int[5]; // Initialises array with elements numbers = {1, 2, 3, 4, 5}; //OR declare and initialise at once int[] numbers = new int[] {1,2,3,4,5}; storing elements in the Inspector , if your array is either public OR private with a [SerializeField] attribute; using a method that sets the contents of an array //stores all GameObjects in the scene with tag \"Respawn\" into the array GameObject[] respawns = GameObject.FindGameObjectsWithTag(\"Respawn\"); In-class exercise Write a script that instantiates multiple prefabs that are: chosen at random from an array; AND each set at a random position within a given scope. (i.e. nothing should be \"out of bounds\", OR objects should only spawn at very specific positions.) (Hint: Try using: array.Length; Random.Range() ; Vector3.Distance() ; AND/OR empty GameObjects as positional references.) Some course reminders Homeplay 1 and Project 1 Sketch are both due next class.","title":"W1 2 prefabs loops arrays"},{"location":"w1-2-prefabs-loops-arrays/#prefabs-loops-arrays","text":"\ud83d\udce6 Unity packages from today's class: Exercise from last class: Solar System Generator In-class exercise: Spawn Random Prefab at Random Position Spawn at random position within set maximum distance. Spawn at random position within set min-max range along X Y and Z axes. Spawn at random position selected from a given array of positions. Before we begin...","title":"Prefabs, Loops, Arrays"},{"location":"w1-2-prefabs-loops-arrays/#review-from-last-class","text":"Transform component and its properties Vectors and how to use them Vector math operations and method functions Using vectors for procedural animation","title":"Review from last class"},{"location":"w1-2-prefabs-loops-arrays/#exercise-from-last-class","text":"How do we make a solar system that dynamically generates at the start of the scene: a random number of planets and moons; a set distance interval between each consecutive sibling planet?","title":"Exercise from last class"},{"location":"w1-2-prefabs-loops-arrays/#prefabs","text":"Read about Prefabs in the Unity Manual. Prefabs allow you to store a GameObject and its information (including its components, property values, child objects, etc.) into your Unity project folder as a reusable Asset . This Prefab Asset can be used as a base template from which you can create and modify new Prefab instances in the scene.","title":"Prefabs"},{"location":"w1-2-prefabs-loops-arrays/#how-to-create-a-prefab-from-an-existing-gameobject-in-the-scene","text":"Click and drag the GameObject from the Scene Hierarchy into your project folder panel. The GameObject should now be marked with a blue icon, and have an arrow button to the right of its name that leads you to the Prefab editor.","title":"How to create a Prefab from an existing GameObject in the scene"},{"location":"w1-2-prefabs-loops-arrays/#how-to-instantiate-a-gameobject","text":"We use the Instantiate() method function to spawn new instances of a GameObject in our scene. Instantiate(someGameObject); You could also pass a GameObject instance into a GameObject variable . This allows you to reference it later in your script. GameObject obj = Instantiate(someGameObject); //let's say we want to change the position of this instance obj.transform.position = someVector; //or set it to a new parent obj.transform.parent = someParentObject; The Instantiate() method can also be called in other ways that allow you to pass multiple parameters at once . The Unity Scripting API lists all the different ways you can declare the Instantiate() function. For example: GameObject obj = Instantiate( spawnThisGameObject, //GameObject atSomePosition, //Vector3 atSomeQuaternionRotation, //Quaternion underSomeParent); //Transform","title":"How to Instantiate a GameObject"},{"location":"w1-2-prefabs-loops-arrays/#loops","text":"Loop functions allow you to repeat an action multiple times. Watch the Unity Tutorial below to learn about: While loops Do-while Loops For Loops ... and one more video about Foreach Loops .","title":"Loops"},{"location":"w1-2-prefabs-loops-arrays/#arrays","text":"Read about Arrays in the Unity Manual. Arrays allow you to store multiple objects in a single variable . Each object in an array is attached to an index number, starting from 0 . This index number is used when calling this object from the array. string[] fruits = {\"apples\", \"pears\", \"oranges\"}; // fruits[0] will return \"apples\" // fruits[1] ... \"pears\" // fruits[2] ... \"oranges\" Every array has a Length property, which gives you the number elements in the array. string[] fruits = {\"apples\", \"pears\", \"oranges\"}; Debug.Log(\"Length of fruits array: \"+ fruits.Length); // console will print \"Length of fruits array: 3\". Arrays cannot be resized while the project is running. If you need to resize a container of objects, either recreate the array to resize it, or use a List instead.","title":"Arrays"},{"location":"w1-2-prefabs-loops-arrays/#how-to-declare-an-array","text":"Declare the type of variable that is being stored in the array, followed by square brackets [] . float[] someFloats; // a private float array private Transform[] someTransforms; // a private Transform array public Vector3[] someVectors; // a public Vector3 array [SerializeField] GameObject[] someGameObjects; // a private GameObject array that is visible in the Inspector. You can initialise the array by: using an array constructor method in your scripts; // Creates an array with 5 empty elements int[] numbers = new int[5]; // Initialises array with elements numbers = {1, 2, 3, 4, 5}; //OR declare and initialise at once int[] numbers = new int[] {1,2,3,4,5}; storing elements in the Inspector , if your array is either public OR private with a [SerializeField] attribute; using a method that sets the contents of an array //stores all GameObjects in the scene with tag \"Respawn\" into the array GameObject[] respawns = GameObject.FindGameObjectsWithTag(\"Respawn\");","title":"How to declare an array"},{"location":"w1-2-prefabs-loops-arrays/#in-class-exercise","text":"Write a script that instantiates multiple prefabs that are: chosen at random from an array; AND each set at a random position within a given scope. (i.e. nothing should be \"out of bounds\", OR objects should only spawn at very specific positions.) (Hint: Try using: array.Length; Random.Range() ; Vector3.Distance() ; AND/OR empty GameObjects as positional references.)","title":"In-class exercise"},{"location":"w1-2-prefabs-loops-arrays/#some-course-reminders","text":"Homeplay 1 and Project 1 Sketch are both due next class.","title":"Some course reminders"},{"location":"w2-1-randomness-noise-customclasses/","text":"hljs.highlightAll(); Randomness, Noise, Custom Classes for Storing Data \ud83d\udce6 Unity packages from today's class: Perlin Noise for Animation and Terrain Generation Using Scripts for Storing Data Spawning Objects at Random Positions without Repeats Colour Scheme Randomizer Before we begin... Review from last class Prefabs and Instantiation Creating a prefab Instantiate() method Arrays How to declare and initialise arrays How to get an element from an array Random.Range() Randomness Sometimes we want to randomize the behaviour of our game, for procedurally generating levels, for adding variation to the behavior of NPCs, and more. Random.Range Read about Random.Range in the Unity Scripting API. There are two versions of Random.Range: one that returns a random float within a minimum inclusive float and maximum inclusive float; Note: you can make any number a float by adding an 'f' at the end. float randomFloat = Random.Range(0.5f, 2.5f); // returns a random float between 0.5 and 2.5, including 0.5 and 2.5 float randomFloat = Random.Range(2f, 4f); // returns a random float between 2 and 4, including 2 and 4. and one that returns a random integer within a minimum inclusive integer and maximum exclusive integer. int randomInteger = Random.Range(0, 3); // returns a random integer between 0 and 3, including 0 but excluding 3, // ie. possible outcomes are 0, 1, and 2. Using Random.Range with Conditional Statements We can use Random.Range and conditional statements to determine what actions happen depending on the random output number, as well as the probability of each outcome. For example, a coin toss can be set up using a random integer ... int coinToss = Random.Range(0,2); // the only possible outcomes are 0 and 1. if (coinToss == 0){ Debug.Log(\"Heads\"); } else { // if coinToss == 1 Debug.Log(\"Tails\"); } ... or a random float . Both are doing the exact same thing, because the probability of either outcome is exactly the same (50% chance). float coinToss = Random.Range(0f,1f); // outcome can be any decimal number between 0 to 1, including 0 and 1. if (coinToss > 0.5f){ // if coinToss is more than 0.5f Debug.Log(\"Heads\"); } else { // if coinToss is less than or equal to 0.5f Debug.Log(\"Tails\"); } You can also set up your outcomes with an uneven probability . float badCoin = Random.Range(0f,1f); if (badCoin > 0.7f){ // if coinToss is more than 0.7f Debug.Log(\"Heads\"); // this has a 30% chance of happening } else { // if coinToss is less than or equal to 0.7f Debug.Log(\"Tails\"); // this has a 70% chance of happening } The above examples use if-else statements to select which actions to run based on what the random number is. You can also use switch statements , which are helpful for working with a longer list of possible outcomes . This is because switch statements evaluate all possible outcomes and proceed immediately to the relevant \"case\" index, instead of evaluating the conditions one by one according to the order listed in an \"if-else\" chain. Switch statements will look at one variable (placed inside the parentheses), and switch across different listed outcomes (each listed as a case index) until it finds one that matches the current value. Each case must end off with a break; statement to exit the loop. int diceRoll = Random.Range(1,7); //possible outcomes are 1, 2, 3, 4, 5, and 6. switch (diceRoll) { case 1: // if diceRoll == 1 Debug.Log(\"Rolled a 1.\"); break; // exit loop case 2: // if diceRoll == 2 Debug.Log(\"Rolled a 2.\"); break; // exit loop //etc... case 6: // if diceRoll == 6 Debug.Log(\"Rolled a 6.\"); break; // exit loop default: //acts like an \"else\" statement to catch all other outcomes not listed above. Debug.Error(\"Invalid roll number.\"); break; // exit loop } Using Random.Range with Arrays You can use Random.Range (for random integers) to pick elements out of an array at random by using the length of the array as the second argument. string[] names = new string[]{\"alfred\",\"bruno\", \"cynthia\",\"dianne\",\"esther\"}; int pick = Random.Range(0, names.Length); Debug.Log(names[pick]); //prints one of the names in the array at random. Noise We will learn about two kinds of noise: random noise and perlin noise Random Noise In random noise, the values generated are completely random and have no correlation to one another . This creates a very grainy and chaotic texture. -- Noise made with random noise And because the random values are independent of one another, if we were to transfer one area of random noise onto another (with all other parameters kept the same), it blends in seamlessly. -- Random noise feels uninterrupted regardless of the transposition of values. Perlin Noise If you're curious about the mathematical logic behind perlin noise generation, I recommend watching this Youtube video, Perlin Noise Explained (start from 06:45). Sometimes in computer graphics, we want to use seemingly random values that are smoothly interpolated across one another. In these situations, we could get \"smooth\" random values with Perlin Noise . -- Noise made with perlin noise In perlin noise, neighbouring values are related to each other through the smooth interpolation from one area to another. Therefore, if we were to move one area of perlin noise onto another, the smooth interpolation is disrupted, and we can clearly see where one area starts and ends. -- Transposition of values becomes very clear in perlin noise. Mathf.PerlinNoise Read about Mathf.PerlinNoise in the Unity Scripting API. In Unity, we can use Mathf.PerlinNoise to generate Perlin noise across a 2D plane. To use this method, we pass two sample points along the X and Y axes in floats into the function, and it will return a float value between approaximately 0 and 1 which corresponds to the colour of the noise in those exact coordinates (Black is 0; White is 1.) (Note: return value might be slightly below 0.0 or beyond 1.0.) Using Random Seeds in Perlin Noise Because Perlin noise is a pseudo-random pattern of float values (i.e. it's not truly random), the same sample X and Y coordinates will return the same value. You can use Random.Range to randomize the X or Y coordinates to sample random parts of the Perlin noise image. float randomSeed; // Note: // A (random) seed is like a starting sample coordinate // that can be passed into a pseudorandom generator like perlin noise // to create a replicable outcome. void Start() { randomSeedY = Random.Range(0f, 100f); } void Update() { float x = Time.time; float y = randomSeed; float someNoiseValue = Mathf.PerlinNoise(x,y); } Remapping Output Range in Perlin Noise Because the range of values in Perlin noise is limited to 0:1, we typically need to translate this value to a diferent range . For example, you could use a little algebra to remap the noise value range from 0:1 to -1:1: float someNoiseValue = Mathf.PerlinNoise(x,y); float remappedNoise = (someNoiseValue * 2) - 1; You could also use Mathf.Lerp to remap the noise value from 0:1 to a different range of values. This example below remaps noise to -255:255. float noise = Mathf.PerlinNoise(x,y); float remappedNoise = Mathf.Lerp(-255,255, noise); Animating Perlin Noise using Time.time We can pass [Time.time] into our x or y-coordinates to \"march\" across the perlin noise image over time. float x, y, someNoiseValue; void Start(){ y = 0; } void Update(){ x = Time.time; //Time.time is the amount of time that has passed since the start of the application someNoiseValue = Mathf.PerlinNoise(x,y); } This value could be passed into any property in your scene (such as y-position) for procedural animation. -- Perlin noise value is passed into the spheres' y-position; each sphere has their perlin noise sample coordinate offset by an increment of 0.2 in the x-direction. Terrain Generation with Perlin Noise We can pass Perlin noise values into x and y positions to procedurally generate a terrain. -- Terrain generation using cubes and perlin noise. public GameObject prefab; // Start is called before the first frame update void Start() { int seedX = Random.Range(0, 1000); int seedZ = Random.Range(0, 1000); for (float z = 0; z < 100; z++) { for (float x = 0; x < 100; x++) { float y = Mathf.PerlinNoise((x+seedX) * 0.1f, (z+seedZ) * 0.1f) * 2f; if (y > 1) //threshold, only spawn when y is greater than 1 { GameObject instance = Instantiate(prefab); instance.transform.position = new Vector3(x, y*10, z); } } } } Custom Classes for Storing Data Review from our first introduction of C# : We typically write Unity C# scripts to make customised blueprints for accessing, organising, and implementing data inside our game project. This is helpful for: storing information such as variables and functions inside an object or class; programming interactive / dynamic behaviour in objects; Sometimes we need to write custom classes to store data and functions about specific objects. For example, we could have a class that describes specific properties of an object. public class Cat { public string name; public string breed; public float size; public bool hasCollar; public Color furColor; public Color eyeColor; } One way of implementing these custom classes is to use them as small \"helper\" classes inside our scripts. For example, we may want to create a custom class that contains a variety of colour schemes. Because we don't need this information to be attached to a GameObject as a component, we can leave it as a non-MonoBehaviour class. In this case, it's useful to mark this class as \"serializable\", so that the unity editor can see it and edit it. (Note: if your class is already a MonoBehaviour, Unity Editor can already see and edit it, so it does not need to the Serializable attribute.) [System.Serializable] public class ColorScheme { public Color mainColor; public Color accent; } You can include this class in the same script as one of your MonoBehaviour classes , or create a new c# file to contain it. From here, we could store a bunch of possible color schemes in a ColorScheme array, then determine the possible color schemes in the Inspector: public class ColorSchemeRandomizer:MonoBehaviour { public ColorScheme[] colorSchemes; ColorScheme SelectedColorScheme; void Start() { SelectedColorScheme = colorSchemes[Random.Range(0,colorSchemes.Length)]; } } [System.Serializable] public class ColorScheme { public Color mainColor; public Color accent; } Some course reminders Project 1 is due next Tuesday. Instructions on How To Submit your Projects are now updated.","title":"W2 1 randomness noise customclasses"},{"location":"w2-1-randomness-noise-customclasses/#randomness-noise-custom-classes-for-storing-data","text":"\ud83d\udce6 Unity packages from today's class: Perlin Noise for Animation and Terrain Generation Using Scripts for Storing Data Spawning Objects at Random Positions without Repeats Colour Scheme Randomizer Before we begin...","title":"Randomness, Noise, Custom Classes for Storing Data"},{"location":"w2-1-randomness-noise-customclasses/#review-from-last-class","text":"Prefabs and Instantiation Creating a prefab Instantiate() method Arrays How to declare and initialise arrays How to get an element from an array Random.Range()","title":"Review from last class"},{"location":"w2-1-randomness-noise-customclasses/#randomness","text":"Sometimes we want to randomize the behaviour of our game, for procedurally generating levels, for adding variation to the behavior of NPCs, and more.","title":"Randomness"},{"location":"w2-1-randomness-noise-customclasses/#randomrange","text":"Read about Random.Range in the Unity Scripting API. There are two versions of Random.Range: one that returns a random float within a minimum inclusive float and maximum inclusive float; Note: you can make any number a float by adding an 'f' at the end. float randomFloat = Random.Range(0.5f, 2.5f); // returns a random float between 0.5 and 2.5, including 0.5 and 2.5 float randomFloat = Random.Range(2f, 4f); // returns a random float between 2 and 4, including 2 and 4. and one that returns a random integer within a minimum inclusive integer and maximum exclusive integer. int randomInteger = Random.Range(0, 3); // returns a random integer between 0 and 3, including 0 but excluding 3, // ie. possible outcomes are 0, 1, and 2.","title":"Random.Range"},{"location":"w2-1-randomness-noise-customclasses/#using-randomrange-with-conditional-statements","text":"We can use Random.Range and conditional statements to determine what actions happen depending on the random output number, as well as the probability of each outcome. For example, a coin toss can be set up using a random integer ... int coinToss = Random.Range(0,2); // the only possible outcomes are 0 and 1. if (coinToss == 0){ Debug.Log(\"Heads\"); } else { // if coinToss == 1 Debug.Log(\"Tails\"); } ... or a random float . Both are doing the exact same thing, because the probability of either outcome is exactly the same (50% chance). float coinToss = Random.Range(0f,1f); // outcome can be any decimal number between 0 to 1, including 0 and 1. if (coinToss > 0.5f){ // if coinToss is more than 0.5f Debug.Log(\"Heads\"); } else { // if coinToss is less than or equal to 0.5f Debug.Log(\"Tails\"); } You can also set up your outcomes with an uneven probability . float badCoin = Random.Range(0f,1f); if (badCoin > 0.7f){ // if coinToss is more than 0.7f Debug.Log(\"Heads\"); // this has a 30% chance of happening } else { // if coinToss is less than or equal to 0.7f Debug.Log(\"Tails\"); // this has a 70% chance of happening } The above examples use if-else statements to select which actions to run based on what the random number is. You can also use switch statements , which are helpful for working with a longer list of possible outcomes . This is because switch statements evaluate all possible outcomes and proceed immediately to the relevant \"case\" index, instead of evaluating the conditions one by one according to the order listed in an \"if-else\" chain. Switch statements will look at one variable (placed inside the parentheses), and switch across different listed outcomes (each listed as a case index) until it finds one that matches the current value. Each case must end off with a break; statement to exit the loop. int diceRoll = Random.Range(1,7); //possible outcomes are 1, 2, 3, 4, 5, and 6. switch (diceRoll) { case 1: // if diceRoll == 1 Debug.Log(\"Rolled a 1.\"); break; // exit loop case 2: // if diceRoll == 2 Debug.Log(\"Rolled a 2.\"); break; // exit loop //etc... case 6: // if diceRoll == 6 Debug.Log(\"Rolled a 6.\"); break; // exit loop default: //acts like an \"else\" statement to catch all other outcomes not listed above. Debug.Error(\"Invalid roll number.\"); break; // exit loop }","title":"Using Random.Range with Conditional Statements"},{"location":"w2-1-randomness-noise-customclasses/#using-randomrange-with-arrays","text":"You can use Random.Range (for random integers) to pick elements out of an array at random by using the length of the array as the second argument. string[] names = new string[]{\"alfred\",\"bruno\", \"cynthia\",\"dianne\",\"esther\"}; int pick = Random.Range(0, names.Length); Debug.Log(names[pick]); //prints one of the names in the array at random.","title":"Using Random.Range with Arrays"},{"location":"w2-1-randomness-noise-customclasses/#noise","text":"We will learn about two kinds of noise: random noise and perlin noise","title":"Noise"},{"location":"w2-1-randomness-noise-customclasses/#random-noise","text":"In random noise, the values generated are completely random and have no correlation to one another . This creates a very grainy and chaotic texture. -- Noise made with random noise And because the random values are independent of one another, if we were to transfer one area of random noise onto another (with all other parameters kept the same), it blends in seamlessly. -- Random noise feels uninterrupted regardless of the transposition of values.","title":"Random Noise"},{"location":"w2-1-randomness-noise-customclasses/#perlin-noise","text":"If you're curious about the mathematical logic behind perlin noise generation, I recommend watching this Youtube video, Perlin Noise Explained (start from 06:45). Sometimes in computer graphics, we want to use seemingly random values that are smoothly interpolated across one another. In these situations, we could get \"smooth\" random values with Perlin Noise . -- Noise made with perlin noise In perlin noise, neighbouring values are related to each other through the smooth interpolation from one area to another. Therefore, if we were to move one area of perlin noise onto another, the smooth interpolation is disrupted, and we can clearly see where one area starts and ends. -- Transposition of values becomes very clear in perlin noise.","title":"Perlin Noise"},{"location":"w2-1-randomness-noise-customclasses/#mathfperlinnoise","text":"Read about Mathf.PerlinNoise in the Unity Scripting API. In Unity, we can use Mathf.PerlinNoise to generate Perlin noise across a 2D plane. To use this method, we pass two sample points along the X and Y axes in floats into the function, and it will return a float value between approaximately 0 and 1 which corresponds to the colour of the noise in those exact coordinates (Black is 0; White is 1.) (Note: return value might be slightly below 0.0 or beyond 1.0.)","title":"Mathf.PerlinNoise"},{"location":"w2-1-randomness-noise-customclasses/#using-random-seeds-in-perlin-noise","text":"Because Perlin noise is a pseudo-random pattern of float values (i.e. it's not truly random), the same sample X and Y coordinates will return the same value. You can use Random.Range to randomize the X or Y coordinates to sample random parts of the Perlin noise image. float randomSeed; // Note: // A (random) seed is like a starting sample coordinate // that can be passed into a pseudorandom generator like perlin noise // to create a replicable outcome. void Start() { randomSeedY = Random.Range(0f, 100f); } void Update() { float x = Time.time; float y = randomSeed; float someNoiseValue = Mathf.PerlinNoise(x,y); }","title":"Using Random Seeds in Perlin Noise"},{"location":"w2-1-randomness-noise-customclasses/#remapping-output-range-in-perlin-noise","text":"Because the range of values in Perlin noise is limited to 0:1, we typically need to translate this value to a diferent range . For example, you could use a little algebra to remap the noise value range from 0:1 to -1:1: float someNoiseValue = Mathf.PerlinNoise(x,y); float remappedNoise = (someNoiseValue * 2) - 1; You could also use Mathf.Lerp to remap the noise value from 0:1 to a different range of values. This example below remaps noise to -255:255. float noise = Mathf.PerlinNoise(x,y); float remappedNoise = Mathf.Lerp(-255,255, noise);","title":"Remapping Output Range in Perlin Noise"},{"location":"w2-1-randomness-noise-customclasses/#animating-perlin-noise-using-timetime","text":"We can pass [Time.time] into our x or y-coordinates to \"march\" across the perlin noise image over time. float x, y, someNoiseValue; void Start(){ y = 0; } void Update(){ x = Time.time; //Time.time is the amount of time that has passed since the start of the application someNoiseValue = Mathf.PerlinNoise(x,y); } This value could be passed into any property in your scene (such as y-position) for procedural animation. -- Perlin noise value is passed into the spheres' y-position; each sphere has their perlin noise sample coordinate offset by an increment of 0.2 in the x-direction.","title":"Animating Perlin Noise using Time.time"},{"location":"w2-1-randomness-noise-customclasses/#terrain-generation-with-perlin-noise","text":"We can pass Perlin noise values into x and y positions to procedurally generate a terrain. -- Terrain generation using cubes and perlin noise. public GameObject prefab; // Start is called before the first frame update void Start() { int seedX = Random.Range(0, 1000); int seedZ = Random.Range(0, 1000); for (float z = 0; z < 100; z++) { for (float x = 0; x < 100; x++) { float y = Mathf.PerlinNoise((x+seedX) * 0.1f, (z+seedZ) * 0.1f) * 2f; if (y > 1) //threshold, only spawn when y is greater than 1 { GameObject instance = Instantiate(prefab); instance.transform.position = new Vector3(x, y*10, z); } } } }","title":"Terrain Generation with Perlin Noise"},{"location":"w2-1-randomness-noise-customclasses/#custom-classes-for-storing-data","text":"Review from our first introduction of C# : We typically write Unity C# scripts to make customised blueprints for accessing, organising, and implementing data inside our game project. This is helpful for: storing information such as variables and functions inside an object or class; programming interactive / dynamic behaviour in objects; Sometimes we need to write custom classes to store data and functions about specific objects. For example, we could have a class that describes specific properties of an object. public class Cat { public string name; public string breed; public float size; public bool hasCollar; public Color furColor; public Color eyeColor; } One way of implementing these custom classes is to use them as small \"helper\" classes inside our scripts. For example, we may want to create a custom class that contains a variety of colour schemes. Because we don't need this information to be attached to a GameObject as a component, we can leave it as a non-MonoBehaviour class. In this case, it's useful to mark this class as \"serializable\", so that the unity editor can see it and edit it. (Note: if your class is already a MonoBehaviour, Unity Editor can already see and edit it, so it does not need to the Serializable attribute.) [System.Serializable] public class ColorScheme { public Color mainColor; public Color accent; } You can include this class in the same script as one of your MonoBehaviour classes , or create a new c# file to contain it. From here, we could store a bunch of possible color schemes in a ColorScheme array, then determine the possible color schemes in the Inspector: public class ColorSchemeRandomizer:MonoBehaviour { public ColorScheme[] colorSchemes; ColorScheme SelectedColorScheme; void Start() { SelectedColorScheme = colorSchemes[Random.Range(0,colorSchemes.Length)]; } } [System.Serializable] public class ColorScheme { public Color mainColor; public Color accent; }","title":"Custom Classes for Storing Data"},{"location":"w2-1-randomness-noise-customclasses/#some-course-reminders","text":"Project 1 is due next Tuesday. Instructions on How To Submit your Projects are now updated.","title":"Some course reminders"},{"location":"w2-2-basicinput-ui-lights-camera/","text":"hljs.highlightAll(); Basic Input, UI, Lights and Camera Settings \ud83d\udce6 Unity packages from today's class: UI Demo: Buttons and TextMeshPro Setting up Interactivity for Button component Change TextMeshPro using scripts, with custom style tags. Using Buttons to Instantiate new object and Destroy old object instance Before we begin... Review from last class Using Random.Range() and conditional statements to set probability of multiple outcomes. Noise Difference between random noise and Perlin noise Mathf.PerlinNoise for animations and terrain generation Using custom classes to store data about properties in our scene Basic Input We can use the Input class to access methods for mapping key or button inputs. Using KeyCode Read the full documentation for Unity's list of key codes here . Key codes map directly to a physical key on the keyboard, mouse buttons and joystick buttons. By passing key codes into our input method functions, we can tell Unity which inputs to detect. Input.GetKey Returns true while the user holds down the key identified. void Update(){ if (Input.GetKey(KeyCode.Space)){ Debug.Log(\"Spacebar is held down.\"); //will keep sending console message //for as long as player holds down the spacebar. } } Input.GetKeyDown Returns true during the frame the user starts pressing down the key identified. void Update(){ if (Input.GetKeyDown(KeyCode.Mouse0)){ Debug.Log(\"Left mouse button pressed.\"); //only sends console message once //even if player continues to hold down the spacebar. } } Input.GetKeyUp Returns true during the frame the user releases the key identified. void Update(){ if (Input.GetKeyUp(KeyCode.Mouse1)){ Debug.Log(\"Right mouse button released.\"); } } These are very simple and straightforward methods for mapping inputs to custom actions, but certainly isn't the only one available! Unity has more organised systems in place for setting up our inputs -- we will discuss those later in the quarter. UI For games it's often useful to add user interface elements like text and images on top of what the camera is seeing. Unity features a UI system, which we can use to add elements to our game like clickable buttons, meters, images, and text. To start with, we'll look at how to add text elements to your project. Create a New TextMeshPro (TMP) UI Object Create a new TMP element by right-clicking in the Scene Hierarchy panel > UI > Text - TextMeshPro . TextMeshPro is an improved version of Unity's legacy text element. I recommend just starting with that whenever you're working with text. The first time you make a TMP element in your project, it will prompt you to import TMP Essential Resources and Examples & Extras. You only need to import Essential Resources to continue using TMP. Read more about Unity's documentation of TextMeshPro here . When you create your first UI element in your scene, Unity automatically adds two other objects -- a Canvas (inside which our TMP element is nested) and an EventSystem . Canvas The Canvas is the container which will hold our UI elements. By default it comes with three components: The Canvas , which determines how and where the UI elements are drawn. The size of the canvas corresponds to the screen. The Canvas Scaler , which controls how individual UI elements scale to fit different screen sizes. I like to change UI Scale Mode from \"Constant Pixel Size\" to \"Scale With Screen size\" , so that UI elements appear the same size no matter what resolution screen the player views your work on. the Graphic Raycaster , which helps with certain interactive UI elements. We can ignore this component for now. Event System The Event System helps make UI elements navigable with both keyboard/mouse, and joystick controls. For now we can ignore this object. If you are not planning to make your UI elements clickable, it is okay to delete this object. UI Element Components All UI elements will have these two components: Rect Transform -- a special kind of transform designed to work with canvases. Canvas Renderer -- a component used to render graphics to the canvas. Using Rect Transforms Read more about Rect Transforms and its properties, including pivots and anchors, in the Unity Manual here . Positioning UI Elements Use the Rect Transform tool (shortcut [T]) to adjust the position and size of UI elements within the canvas. Find it in the tool bar at the upper right of the screen. With the rect tool, you can adjust the anchor position of a UI element by dragging these triangles around the screen. This text element is now anchored to the bottom center of the canvas. You can anchor UI elements to different positions on the screen. For instance, sometimes you might want a health meter to always appear in the lower left corner of the screen, or a dialogue box to always appear in the upper center. Try changing the size of the game view to see how your text elements change position. Anchors can also be stretched across an area so that the UI element resizes relative to the canvas size. You can also edit the anchor point by using this dropdown in the inspector. Hold down SHIFT to set the position and ALT to set the pivot at the same time. Canvas Size & Aspect Ratio By default, your Game preview panel's aspect ratio is set to \"Free Aspect.\" Notice that the canvas changes its size to match the dimensions of the screen! This can cause a lot of confusion when working with UI elements. To fix this problem, Use the dropdown in the Game window to set a fixed aspect ratio or pixel size. I recommend setting it to 1920x1080. You may need to increase the font size of your text, or find the canvas scaler component and change it to \"Scale With Screen Size\" You may also notice that the canvas is way larger than anything else in your scene . That is OK! Controlling UI Elements with Scripts UI elements are components, just like anything else in Unity. You can set their properties when the game is running with code! To work with UI elements , you typically need to include the following statement at the top of your script: using UnityEngine; using UnityEngine.UI; //include this line to work with UI elements Once you do, you can work with UI elements like any other component. Scripting for TextMeshPro TextMeshPro is an exceptional case, because its methods and properties are stored in its own namespace called TMPro . For TextMeshPro elements, you will need to add this line at the top of your script, instead of using UnityEngine.UI . using TMPro; To declare TextMeshPro components , you will need to decide which class name to use depending on whether the TextMeshPro component is used as a UI element nested inside a canvas , or a mesh in 3D world space . public TextMeshProUGUI tmpUI; //if tmp is inside the UI canvas. public TextMeshPro tmp; //if tmp is outside the UI canvas. You can also style your text using style tags in arrow brackets <>. I recommend looking at Unity's tutorial on styling TMPro elements to learn more. //Note: the code below does not include other functions //like checking whether to use \"a\" or \"an\" before the color name //nor color randomizer functions for the cube's material. using UnityEngine; using TMPro; public class UpdateText : MonoBehaviour { public TextMeshProUGUI uiTmp; public Color col; public string colorName; //map this function to a button click event. public void SetText(){ string colorHex = ColorUtility.ToHtmlStringRGB(col); // returns color as hexademical string in the format of \"RRGGBB\" uiTmp.text = \"This is a <color=#\" + colorHex + \">\"+colorName+\"</color> cube.\"; } } Custom Font Assets for TextMeshPro You can add custom .ttf and .otf font files into your asset folder, and convert them into a TextMeshPro Font Asset. Go to Window > TextMeshPro > Font Asset Creator . Add your .ttf and .otf font file into Source Font File. Click Generate Font Asset . Unity will tell you if there are any characters missing or excluded from the selected font (this depends on what you put as your Character Set in the Font Asset Creator.) Once you're ready, click Save . You can now use this Font Asset in your TextMeshPro components. Buttons Read about Buttons in the Unity Scripting API. A button element will come with the following things: an Image component, which determines the button's sprite. a Button component, which determines the interactive aspects of the button (including color and transition settings for different button states) a nested Text element in the scene hierarchy, which determines what the button's label reads. -- Button components in Inspector -- Nested TextMeshPro component in Inspector Assigning Functions to OnClick() Event Whenever we click a button, it triggers a UnityEvent called OnClick() . In the inspector, we can tell Unity which method functions should \"listen\" for this event so they can be called once the event is \"invoked\" (ie. when the event happens.) We can add multiple event listeners to the a single UnityEvent, allowing us to simultaneously call as many functions as we want once an event is invoked. To add a method function as an event listener in the Inspector panel: In the On Click () event box, click + to add a new listener to the list. Select the relevant GameObject that contains the component with our desired method function. In the dropdown, look for the method function that we want to run when the event happens. If you want to add a custom function as an event listener through the Inspector panel: The function must be declared public . The function must be nested within a MonoBehaviour class that is attached to a GameObject in your scene as a script component. -- In this example, I'm selecting a Cube object that has a ColorRandomizer script, and adding a SetRandomColor() function as an event listener. Creating a Button to Instantiate New Object and Destroy Previous Object To replace an existing object in the scene with a new instantiation, you will need to use the Destroy() method to remove it from the scene. Destroy() can be used to destroy GameObjects and components. public GameObject[] prefabs; GameObject obj; //this will store the most recently spawned object int previousIndex; //our array index reference of the previously spawned object void Start() { SpawnObj(); // spawn new object at start of scene } // add this as a listener to the button's OnClick() event in the inspector. public void SpawnObj() { //get a random index from prefabs int randomObj = Random.Range(0, prefabs.Length); if (obj != null) //if there is an existing obj in the scene //(i.e. it's not our first time spawning an object) { while (randomObj == previousIndex) // as long as our random index is the same as our previous index { randomObj = Random.Range(0, prefabs.Length); //continue randomising until we get a new index that's different from the previous one. } Destroy(obj); //destroy the old object } previousIndex = randomObj; // update previous index to current index. // spawn the random object and assign it to \"obj\" variable obj = Instantiate(prefabs[randomObj]); } If you don't want to completely destroy that instance of the GameObject or component from your scene , you may consider using SetActive() for GameObjects, and .enabled for components instead. This would just \"switch off\" your objects or components, but keeps them available in the scene so you can switch them back on again. There are also workflows for setting up UnityEvents and Listeners using scripts , but we'll get to that in a later lesson! Lights and Camera Settings Here is a basic overview of some elements you can consider using to easily establish the atmosphere and setting of your project. Light Component Read more about URP's light component in Unity's documentation. Add a Light object to your scene by right-clicking in the Hierarchy panel > Light > choice of Light type (you can change the type in the Light component later on.) -- Light component in the Inspector panel. Some sections you can focus on now are (depending on the type of light you're using): Type : Directional, Point, Spot, Area (baked only) \u2013 see examples of each here Light Appearance / Color : Set color of the light based on color or temperature Intensity : Amount to multiply the light color to control the brightness of the light Indirect Multiplier : Intensity of indirect lighting Shadow Type : None, Soft, Hard Environment Lighting In the Unity Editor, go to Window > Lighting > Environment . Here, you can customize some of the following settings: Skybox Material : The skybox itself is a material that uses a special type of shader to create the impression of an image or color that surrounds the entire scene, which can contribute to the overall color and brightness of a scene. If you are going to use a skybox for your project, I recommend changing the default Unity skybox to a different material. An easy way to do this is to import a custom texture that is compatible for skyboxes (e.g. 360 HDR images or Cubmemaps), and put it in a material asset with a Skybox shader. The Unity Asset store also has plenty of options, many of which are free. Realtime Shadow Colours : Assign an ambient color to your realtime shadows. Environment Lighting Source : You can have your scene be lit with either a skybox material, a gradient, or a solid colour. Fog (nested in \"Other Settings\"): Adds a fog effect for your game, with customizable colour, distribution, and density. Camera Try exploring these settings for your Main Camera object. Projection : You can set your camera to be either Perspective or Orthogonal, and decide how far/close your camera's lens is able to capture ( Field of View for Perspective camera; Size for Orthogonal camera.) -- The same scene shown in perspective mode (left) and orthographic mode (right). Background Type (under Environment section): You can decide between having a Skybox or Solid colour as the background material that your camera renders. Some course reminders Project 1 is due next Tuesday.","title":"W2 2 basicinput ui lights camera"},{"location":"w2-2-basicinput-ui-lights-camera/#basic-input-ui-lights-and-camera-settings","text":"\ud83d\udce6 Unity packages from today's class: UI Demo: Buttons and TextMeshPro Setting up Interactivity for Button component Change TextMeshPro using scripts, with custom style tags. Using Buttons to Instantiate new object and Destroy old object instance Before we begin...","title":"Basic Input, UI, Lights and Camera Settings"},{"location":"w2-2-basicinput-ui-lights-camera/#review-from-last-class","text":"Using Random.Range() and conditional statements to set probability of multiple outcomes. Noise Difference between random noise and Perlin noise Mathf.PerlinNoise for animations and terrain generation Using custom classes to store data about properties in our scene","title":"Review from last class"},{"location":"w2-2-basicinput-ui-lights-camera/#basic-input","text":"We can use the Input class to access methods for mapping key or button inputs.","title":"Basic Input"},{"location":"w2-2-basicinput-ui-lights-camera/#using-keycode","text":"Read the full documentation for Unity's list of key codes here . Key codes map directly to a physical key on the keyboard, mouse buttons and joystick buttons. By passing key codes into our input method functions, we can tell Unity which inputs to detect.","title":"Using KeyCode"},{"location":"w2-2-basicinput-ui-lights-camera/#inputgetkey","text":"Returns true while the user holds down the key identified. void Update(){ if (Input.GetKey(KeyCode.Space)){ Debug.Log(\"Spacebar is held down.\"); //will keep sending console message //for as long as player holds down the spacebar. } }","title":"Input.GetKey"},{"location":"w2-2-basicinput-ui-lights-camera/#inputgetkeydown","text":"Returns true during the frame the user starts pressing down the key identified. void Update(){ if (Input.GetKeyDown(KeyCode.Mouse0)){ Debug.Log(\"Left mouse button pressed.\"); //only sends console message once //even if player continues to hold down the spacebar. } }","title":"Input.GetKeyDown"},{"location":"w2-2-basicinput-ui-lights-camera/#inputgetkeyup","text":"Returns true during the frame the user releases the key identified. void Update(){ if (Input.GetKeyUp(KeyCode.Mouse1)){ Debug.Log(\"Right mouse button released.\"); } } These are very simple and straightforward methods for mapping inputs to custom actions, but certainly isn't the only one available! Unity has more organised systems in place for setting up our inputs -- we will discuss those later in the quarter.","title":"Input.GetKeyUp"},{"location":"w2-2-basicinput-ui-lights-camera/#ui","text":"For games it's often useful to add user interface elements like text and images on top of what the camera is seeing. Unity features a UI system, which we can use to add elements to our game like clickable buttons, meters, images, and text. To start with, we'll look at how to add text elements to your project.","title":"UI"},{"location":"w2-2-basicinput-ui-lights-camera/#create-a-new-textmeshpro-tmp-ui-object","text":"Create a new TMP element by right-clicking in the Scene Hierarchy panel > UI > Text - TextMeshPro . TextMeshPro is an improved version of Unity's legacy text element. I recommend just starting with that whenever you're working with text. The first time you make a TMP element in your project, it will prompt you to import TMP Essential Resources and Examples & Extras. You only need to import Essential Resources to continue using TMP. Read more about Unity's documentation of TextMeshPro here . When you create your first UI element in your scene, Unity automatically adds two other objects -- a Canvas (inside which our TMP element is nested) and an EventSystem .","title":"Create a New TextMeshPro (TMP) UI Object"},{"location":"w2-2-basicinput-ui-lights-camera/#canvas","text":"The Canvas is the container which will hold our UI elements. By default it comes with three components: The Canvas , which determines how and where the UI elements are drawn. The size of the canvas corresponds to the screen. The Canvas Scaler , which controls how individual UI elements scale to fit different screen sizes. I like to change UI Scale Mode from \"Constant Pixel Size\" to \"Scale With Screen size\" , so that UI elements appear the same size no matter what resolution screen the player views your work on. the Graphic Raycaster , which helps with certain interactive UI elements. We can ignore this component for now.","title":"Canvas"},{"location":"w2-2-basicinput-ui-lights-camera/#event-system","text":"The Event System helps make UI elements navigable with both keyboard/mouse, and joystick controls. For now we can ignore this object. If you are not planning to make your UI elements clickable, it is okay to delete this object.","title":"Event System"},{"location":"w2-2-basicinput-ui-lights-camera/#ui-element-components","text":"All UI elements will have these two components: Rect Transform -- a special kind of transform designed to work with canvases. Canvas Renderer -- a component used to render graphics to the canvas.","title":"UI Element Components"},{"location":"w2-2-basicinput-ui-lights-camera/#using-rect-transforms","text":"Read more about Rect Transforms and its properties, including pivots and anchors, in the Unity Manual here .","title":"Using Rect Transforms"},{"location":"w2-2-basicinput-ui-lights-camera/#positioning-ui-elements","text":"Use the Rect Transform tool (shortcut [T]) to adjust the position and size of UI elements within the canvas. Find it in the tool bar at the upper right of the screen. With the rect tool, you can adjust the anchor position of a UI element by dragging these triangles around the screen. This text element is now anchored to the bottom center of the canvas. You can anchor UI elements to different positions on the screen. For instance, sometimes you might want a health meter to always appear in the lower left corner of the screen, or a dialogue box to always appear in the upper center. Try changing the size of the game view to see how your text elements change position. Anchors can also be stretched across an area so that the UI element resizes relative to the canvas size. You can also edit the anchor point by using this dropdown in the inspector. Hold down SHIFT to set the position and ALT to set the pivot at the same time.","title":"Positioning UI Elements"},{"location":"w2-2-basicinput-ui-lights-camera/#canvas-size-aspect-ratio","text":"By default, your Game preview panel's aspect ratio is set to \"Free Aspect.\" Notice that the canvas changes its size to match the dimensions of the screen! This can cause a lot of confusion when working with UI elements. To fix this problem, Use the dropdown in the Game window to set a fixed aspect ratio or pixel size. I recommend setting it to 1920x1080. You may need to increase the font size of your text, or find the canvas scaler component and change it to \"Scale With Screen Size\" You may also notice that the canvas is way larger than anything else in your scene . That is OK!","title":"Canvas Size &amp; Aspect Ratio"},{"location":"w2-2-basicinput-ui-lights-camera/#controlling-ui-elements-with-scripts","text":"UI elements are components, just like anything else in Unity. You can set their properties when the game is running with code! To work with UI elements , you typically need to include the following statement at the top of your script: using UnityEngine; using UnityEngine.UI; //include this line to work with UI elements Once you do, you can work with UI elements like any other component.","title":"Controlling UI Elements with Scripts"},{"location":"w2-2-basicinput-ui-lights-camera/#scripting-for-textmeshpro","text":"TextMeshPro is an exceptional case, because its methods and properties are stored in its own namespace called TMPro . For TextMeshPro elements, you will need to add this line at the top of your script, instead of using UnityEngine.UI . using TMPro; To declare TextMeshPro components , you will need to decide which class name to use depending on whether the TextMeshPro component is used as a UI element nested inside a canvas , or a mesh in 3D world space . public TextMeshProUGUI tmpUI; //if tmp is inside the UI canvas. public TextMeshPro tmp; //if tmp is outside the UI canvas. You can also style your text using style tags in arrow brackets <>. I recommend looking at Unity's tutorial on styling TMPro elements to learn more. //Note: the code below does not include other functions //like checking whether to use \"a\" or \"an\" before the color name //nor color randomizer functions for the cube's material. using UnityEngine; using TMPro; public class UpdateText : MonoBehaviour { public TextMeshProUGUI uiTmp; public Color col; public string colorName; //map this function to a button click event. public void SetText(){ string colorHex = ColorUtility.ToHtmlStringRGB(col); // returns color as hexademical string in the format of \"RRGGBB\" uiTmp.text = \"This is a <color=#\" + colorHex + \">\"+colorName+\"</color> cube.\"; } }","title":"Scripting for TextMeshPro"},{"location":"w2-2-basicinput-ui-lights-camera/#custom-font-assets-for-textmeshpro","text":"You can add custom .ttf and .otf font files into your asset folder, and convert them into a TextMeshPro Font Asset. Go to Window > TextMeshPro > Font Asset Creator . Add your .ttf and .otf font file into Source Font File. Click Generate Font Asset . Unity will tell you if there are any characters missing or excluded from the selected font (this depends on what you put as your Character Set in the Font Asset Creator.) Once you're ready, click Save . You can now use this Font Asset in your TextMeshPro components.","title":"Custom Font Assets for TextMeshPro"},{"location":"w2-2-basicinput-ui-lights-camera/#buttons","text":"Read about Buttons in the Unity Scripting API. A button element will come with the following things: an Image component, which determines the button's sprite. a Button component, which determines the interactive aspects of the button (including color and transition settings for different button states) a nested Text element in the scene hierarchy, which determines what the button's label reads. -- Button components in Inspector -- Nested TextMeshPro component in Inspector","title":"Buttons"},{"location":"w2-2-basicinput-ui-lights-camera/#assigning-functions-to-onclick-event","text":"Whenever we click a button, it triggers a UnityEvent called OnClick() . In the inspector, we can tell Unity which method functions should \"listen\" for this event so they can be called once the event is \"invoked\" (ie. when the event happens.) We can add multiple event listeners to the a single UnityEvent, allowing us to simultaneously call as many functions as we want once an event is invoked. To add a method function as an event listener in the Inspector panel: In the On Click () event box, click + to add a new listener to the list. Select the relevant GameObject that contains the component with our desired method function. In the dropdown, look for the method function that we want to run when the event happens. If you want to add a custom function as an event listener through the Inspector panel: The function must be declared public . The function must be nested within a MonoBehaviour class that is attached to a GameObject in your scene as a script component. -- In this example, I'm selecting a Cube object that has a ColorRandomizer script, and adding a SetRandomColor() function as an event listener.","title":"Assigning Functions to OnClick() Event"},{"location":"w2-2-basicinput-ui-lights-camera/#creating-a-button-to-instantiate-new-object-and-destroy-previous-object","text":"To replace an existing object in the scene with a new instantiation, you will need to use the Destroy() method to remove it from the scene. Destroy() can be used to destroy GameObjects and components. public GameObject[] prefabs; GameObject obj; //this will store the most recently spawned object int previousIndex; //our array index reference of the previously spawned object void Start() { SpawnObj(); // spawn new object at start of scene } // add this as a listener to the button's OnClick() event in the inspector. public void SpawnObj() { //get a random index from prefabs int randomObj = Random.Range(0, prefabs.Length); if (obj != null) //if there is an existing obj in the scene //(i.e. it's not our first time spawning an object) { while (randomObj == previousIndex) // as long as our random index is the same as our previous index { randomObj = Random.Range(0, prefabs.Length); //continue randomising until we get a new index that's different from the previous one. } Destroy(obj); //destroy the old object } previousIndex = randomObj; // update previous index to current index. // spawn the random object and assign it to \"obj\" variable obj = Instantiate(prefabs[randomObj]); } If you don't want to completely destroy that instance of the GameObject or component from your scene , you may consider using SetActive() for GameObjects, and .enabled for components instead. This would just \"switch off\" your objects or components, but keeps them available in the scene so you can switch them back on again. There are also workflows for setting up UnityEvents and Listeners using scripts , but we'll get to that in a later lesson!","title":"Creating a Button to Instantiate New Object and Destroy Previous Object"},{"location":"w2-2-basicinput-ui-lights-camera/#lights-and-camera-settings","text":"Here is a basic overview of some elements you can consider using to easily establish the atmosphere and setting of your project.","title":"Lights and Camera Settings"},{"location":"w2-2-basicinput-ui-lights-camera/#light-component","text":"Read more about URP's light component in Unity's documentation. Add a Light object to your scene by right-clicking in the Hierarchy panel > Light > choice of Light type (you can change the type in the Light component later on.) -- Light component in the Inspector panel. Some sections you can focus on now are (depending on the type of light you're using): Type : Directional, Point, Spot, Area (baked only) \u2013 see examples of each here Light Appearance / Color : Set color of the light based on color or temperature Intensity : Amount to multiply the light color to control the brightness of the light Indirect Multiplier : Intensity of indirect lighting Shadow Type : None, Soft, Hard","title":"Light Component"},{"location":"w2-2-basicinput-ui-lights-camera/#environment-lighting","text":"In the Unity Editor, go to Window > Lighting > Environment . Here, you can customize some of the following settings: Skybox Material : The skybox itself is a material that uses a special type of shader to create the impression of an image or color that surrounds the entire scene, which can contribute to the overall color and brightness of a scene. If you are going to use a skybox for your project, I recommend changing the default Unity skybox to a different material. An easy way to do this is to import a custom texture that is compatible for skyboxes (e.g. 360 HDR images or Cubmemaps), and put it in a material asset with a Skybox shader. The Unity Asset store also has plenty of options, many of which are free. Realtime Shadow Colours : Assign an ambient color to your realtime shadows. Environment Lighting Source : You can have your scene be lit with either a skybox material, a gradient, or a solid colour. Fog (nested in \"Other Settings\"): Adds a fog effect for your game, with customizable colour, distribution, and density.","title":"Environment Lighting"},{"location":"w2-2-basicinput-ui-lights-camera/#camera","text":"Try exploring these settings for your Main Camera object. Projection : You can set your camera to be either Perspective or Orthogonal, and decide how far/close your camera's lens is able to capture ( Field of View for Perspective camera; Size for Orthogonal camera.) -- The same scene shown in perspective mode (left) and orthographic mode (right). Background Type (under Environment section): You can decide between having a Skybox or Solid colour as the background material that your camera renders.","title":"Camera"},{"location":"w2-2-basicinput-ui-lights-camera/#some-course-reminders","text":"Project 1 is due next Tuesday.","title":"Some course reminders"}]}