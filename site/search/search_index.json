{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udfe0 Game Engine Fall 2024 Broad 4240 Tuesdays and Thursdays, 2 p.m. - 4:50 p.m. INSTRUCTOR - Hua Chai (he/they) Office hours: By appointment only; Thursday, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: huazzers@g.ucla.edu TEACHING ASSISTANT - Sagan Yee (he/they) Office hours: By appointment only; Tuesday, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: saganyee@ucla.edu","title":"\ud83c\udfe0 Home"},{"location":"#game-engine","text":"","title":"\ud83c\udfe0 Game Engine"},{"location":"#fall-2024","text":"Broad 4240 Tuesdays and Thursdays, 2 p.m. - 4:50 p.m. INSTRUCTOR - Hua Chai (he/they) Office hours: By appointment only; Thursday, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: huazzers@g.ucla.edu TEACHING ASSISTANT - Sagan Yee (he/they) Office hours: By appointment only; Tuesday, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: saganyee@ucla.edu","title":"Fall 2024"},{"location":"how-to-submit/","text":"How to Submit TBD","title":"How To Submit"},{"location":"how-to-submit/#how-to-submit","text":"TBD","title":"How to Submit"},{"location":"project-1/","text":"Project 1: Auto-Generator Final Submission Due: Week 3 Tuesday, October 15 Prompt Create a generator in Unity that only requires 1 ~ 2 button controls to run. Consider the following options: a landscape / level / terrain generator; a random character generator, eg. exquisite corpse; an evolution simulator, e.g. cellular automaton. Possible techniques: modular architecture using prefabs, arrays/lists, instantiate/destroy functions, empty transforms as connection points; procedural / algorithmic generation using random functions, perlin noise, custom parameters, L-systems, cellular automata, etc. Tips: Consider what constraints or rules you can impose to create unique forms and color palettes. You may work in 2D or 3D. Lean into your strengths as a visual designer / artist as much as possible with this project! (And also remember you don't have much time!) Consider how a viewer will see / experience your generative designs. Can they orbit the camera around? Can they press a button to generate new objects? Requirements Project 1 contains TWO COMPONENTS: PART 1 (2.5%): SKETCH OF PROJECT PROPOSAL Due: Week 2 Tuesday, October 8 A sketch and/or in-progress prototype of your project. Bring this to class for discussion! What are you generating? How are you generating it? PART 2 (12.5%): FINAL PROJECT BUILD WITH DOCUMENTATION Due: Week 3 Tuesday, October 15 Refer to submission guidelines , and submit your final project here (link TBD.) Total contribution to final course grade: 15% Your final project is not required to: be a traditional video game; have sound / audio. Evaluation Your final project will be evaluated according to the guidelines listed in the course syllabus .","title":"Project 1"},{"location":"project-1/#project-1-auto-generator","text":"","title":"Project 1: Auto-Generator"},{"location":"project-1/#final-submission-due-week-3-tuesday-october-15","text":"","title":"Final Submission Due: Week 3 Tuesday, October 15"},{"location":"project-1/#prompt","text":"Create a generator in Unity that only requires 1 ~ 2 button controls to run. Consider the following options: a landscape / level / terrain generator; a random character generator, eg. exquisite corpse; an evolution simulator, e.g. cellular automaton. Possible techniques: modular architecture using prefabs, arrays/lists, instantiate/destroy functions, empty transforms as connection points; procedural / algorithmic generation using random functions, perlin noise, custom parameters, L-systems, cellular automata, etc. Tips: Consider what constraints or rules you can impose to create unique forms and color palettes. You may work in 2D or 3D. Lean into your strengths as a visual designer / artist as much as possible with this project! (And also remember you don't have much time!) Consider how a viewer will see / experience your generative designs. Can they orbit the camera around? Can they press a button to generate new objects?","title":"Prompt"},{"location":"project-1/#requirements","text":"Project 1 contains TWO COMPONENTS: PART 1 (2.5%): SKETCH OF PROJECT PROPOSAL Due: Week 2 Tuesday, October 8 A sketch and/or in-progress prototype of your project. Bring this to class for discussion! What are you generating? How are you generating it? PART 2 (12.5%): FINAL PROJECT BUILD WITH DOCUMENTATION Due: Week 3 Tuesday, October 15 Refer to submission guidelines , and submit your final project here (link TBD.) Total contribution to final course grade: 15% Your final project is not required to: be a traditional video game; have sound / audio.","title":"Requirements"},{"location":"project-1/#evaluation","text":"Your final project will be evaluated according to the guidelines listed in the course syllabus .","title":"Evaluation"},{"location":"project-2/","text":"Project 2: TBD TBD","title":"Project 2"},{"location":"project-2/#project-2-tbd","text":"TBD","title":"Project 2: TBD"},{"location":"project-3/","text":"Project 3: Final Project TBD","title":"Project 3"},{"location":"project-3/#project-3-final-project","text":"TBD","title":"Project 3: Final Project"},{"location":"readings-and-homeplays/","text":"Readings and Homeplays Reading Responses Reading Response 1 Due: Week 1 Thursday, October 3 Submit Your Response Here Read Kate Compton's \"So you want to build a generator\" https://galaxykate0.tumblr.com/post/139774965871/so-you-want-to-build-a-generator Optional If you're hungry for more, below are some recommended talks on more methods and applications of procedural generation: Kate Compton PROCJAM 2015 Talk (15:58 - 49:53) \"Let It Grow: Practical Procedural Generation From The Ground Up\" (34 min) https://www.youtube.com/live/s_eyo_m_hnc?feature=shared&t=958 Herbert Wolverson 2020 Roguelike Celebration Talk \"Procedural Map Generation Techniques\" (27 min) https://www.youtube.com/live/TlLIOgWYVpI Reading Response 2 Homeplays Homeplay 1 Homeplay 2","title":"Readings & Homeplays"},{"location":"readings-and-homeplays/#readings-and-homeplays","text":"","title":"Readings and Homeplays"},{"location":"readings-and-homeplays/#reading-responses","text":"","title":"Reading Responses"},{"location":"readings-and-homeplays/#reading-response-1","text":"Due: Week 1 Thursday, October 3 Submit Your Response Here Read Kate Compton's \"So you want to build a generator\" https://galaxykate0.tumblr.com/post/139774965871/so-you-want-to-build-a-generator Optional If you're hungry for more, below are some recommended talks on more methods and applications of procedural generation: Kate Compton PROCJAM 2015 Talk (15:58 - 49:53) \"Let It Grow: Practical Procedural Generation From The Ground Up\" (34 min) https://www.youtube.com/live/s_eyo_m_hnc?feature=shared&t=958 Herbert Wolverson 2020 Roguelike Celebration Talk \"Procedural Map Generation Techniques\" (27 min) https://www.youtube.com/live/TlLIOgWYVpI","title":"Reading Response 1"},{"location":"readings-and-homeplays/#reading-response-2","text":"","title":"Reading Response 2"},{"location":"readings-and-homeplays/#homeplays","text":"","title":"Homeplays"},{"location":"readings-and-homeplays/#homeplay-1","text":"","title":"Homeplay 1"},{"location":"readings-and-homeplays/#homeplay-2","text":"","title":"Homeplay 2"},{"location":"schedule/","text":"\ud83d\udcc5 Schedule Tuesday Thursday W0 09/26 Due: Preliminary Survey Course Overview & Introductions, Tech check Lecture: Intro to Game Engine, Unity, and C# Assign: Reading Response 1 , Project 1 W1 10/01 Tutorial: Game Objects, Transforms, Vectors Assign: Homeplay 1 10/03 Due: Reading Response 1, Project 1 Sketch Tutorial: Prefabs, Instantiation, Arrays W2 10/08 Due: Homeplay 1 Tutorial: Noise, Randomness, Procedural Generation 10/10 Tutorial: UI, Building your Project Studio Time W3 10/15 Due: Project 1 Project 1 Crit 10/17 Lecture: Level Design Tutorial: Physics and Interaction Assign: Reading Response 2, Homeplay 2, Project 2 W4 10/22 Due: Reading Response 2 10/24 Due: Homeplay 2, Project 2 Sketch Tutorial: Triggers, Collisions W5 10/29 Tutorial: Static Variables, Singletons, Inventory 10/31 Due: Project 2 Prototype Studio Time W6 11/05 Studio Time 11/07 Due: Project 2 Project 2 Crit Assign: Project 3 W7 11/12 Alt-Engine Micro Game Jam? 11/14 Alt-Engine Micro Game Jam? W8 11/19 Due: Project 3 Sketch Tutorial: Cinemachine, Animation, Coroutines 11/21 Tutorial: Persistent Data W9 11/26 Studio Time 11/28 Thanksgiving - No class. W10 12/03 Studio Time 12/05 Due: Project 3","title":"\ud83d\udcc5 Schedule"},{"location":"schedule/#schedule","text":"Tuesday Thursday W0 09/26 Due: Preliminary Survey Course Overview & Introductions, Tech check Lecture: Intro to Game Engine, Unity, and C# Assign: Reading Response 1 , Project 1 W1 10/01 Tutorial: Game Objects, Transforms, Vectors Assign: Homeplay 1 10/03 Due: Reading Response 1, Project 1 Sketch Tutorial: Prefabs, Instantiation, Arrays W2 10/08 Due: Homeplay 1 Tutorial: Noise, Randomness, Procedural Generation 10/10 Tutorial: UI, Building your Project Studio Time W3 10/15 Due: Project 1 Project 1 Crit 10/17 Lecture: Level Design Tutorial: Physics and Interaction Assign: Reading Response 2, Homeplay 2, Project 2 W4 10/22 Due: Reading Response 2 10/24 Due: Homeplay 2, Project 2 Sketch Tutorial: Triggers, Collisions W5 10/29 Tutorial: Static Variables, Singletons, Inventory 10/31 Due: Project 2 Prototype Studio Time W6 11/05 Studio Time 11/07 Due: Project 2 Project 2 Crit Assign: Project 3 W7 11/12 Alt-Engine Micro Game Jam? 11/14 Alt-Engine Micro Game Jam? W8 11/19 Due: Project 3 Sketch Tutorial: Cinemachine, Animation, Coroutines 11/21 Tutorial: Persistent Data W9 11/26 Studio Time 11/28 Thanksgiving - No class. W10 12/03 Studio Time 12/05 Due: Project 3","title":"\ud83d\udcc5 Schedule"},{"location":"syllabus/","text":"\ud83d\udcdc Syllabus Fall 2024 Broad 4240 Tuesdays and Thursdays, 2 p.m. - 4:50 p.m. INSTRUCTOR - Hua Chai (he/they) Office hours: By appointment only; Thursdays, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: huazzers@g.ucla.edu TEACHING ASSISTANT - Sagan Yee (he/they) Office hours: By appointment only; Tuesdays, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: saganyee@ucla.edu Course Description This course introduces the fundamentals of programming interactive projects in game development software. Classwork focuses on familiarizing students with game engines, computer programming concepts, player experience, and other skills that are foundational to making digital games. Lectures, exercises, and class projects teach skills needed to create digital games including custom rules, interactive physics systems, vectors, generative or randomized levels, save data, custom input systems, score-keeping, and sound. This course is offered in parallel with the concurrent courses, Game Design and Interactive Animation. Course Prerequisites DESMA 24 Motion DESMA 101 Media Arts Introduction / DESMA 104 Design Futures This course will be heavy on C# scripting in Unity scripting API. If you haven't fulfilled the above pre-requisites but have prior experience in either writing code or using the Unity game engine , please let me know. Learning Outcomes By the end of this course, you will be able to create a real-time, interactive software with custom rules, generative or randomized levels, save data, responsive controls, physics, sound, and simple animation. The skills you will learn in this class translate well to immersive media, generative animation, and other modes of human-computer expression. Course Outline Unit 1: Generative Computation Using generative design to create random/unique/dynamic ecosystems, worlds, characters, and events in Unity. Week 0-3 Intro to Unity Game Engine and C# , Vector fundamentals , Prefabs and Instantiation , Arrays and Randomness, UI Project 1: Auto-Generator Unit 2: Playing with Physics Using physics, math, and other game engine tools to design environments and mechanics for interactive gameplay. Week 4-6 Level Design , Input Systems , Physics Simulations , Static Variables and Singletons, Sound Project 2: Ball Game Remix Intermission: Alt-Engines Explore other tiny game engines! Week 7 Micro Game Jam(s) -- Make an entire game in a single class. Unit 3: Save && Scene Using persistent data, effects, and cinematic affordances of the game engine to revise and refine your projects. Week 8-10 Cinemachine, Animation, Coroutines, Persistent Data Project 3: Final Project (TBD) Assignments and Grading See How To Submit on instructions for submitting Unity projects Course Breakdown Project 1: 15% Project 2: 25% Project 3: 25% Reading / Homeplay responses: 15% Participation / Attendance: 20% Evaluation Criteria Projects Considering the likelihood that everyone is coming in with different skillsets and coding experiences, the expectation for this class is that you approach each project with your own level of skill and comfort in mind. Design a project for yourself that pushes your technical skills a little bit , but also allows you to lean into your existing strengths and practices. We will evaluate your projects based on: Timely submission Did you submit your project on time? (see Late Work for more details.) Completion of Project Deliverables Does your project meet the requirements of the assignment? Attention to detail and craft Does the project run? Are there unintended bugs, glitches, etc. Project scope / aesthetic and technical ambition Are you doing the bare minimum, or are you pushing yourself technically and/or aesthetically? Creative risk-taking and resourcefulness Are you pushing the limits of the tools? Hacky solutions are perfectly acceptable and encouraged! Readings / Homeplays You will be assigned occasional readings and games that are related to this course, accompanied by a questionnaire for you to complete and bring to class. These are graded pass/fail -- if you did the work, you will get full credit. Participation / Attendance This is an in-person course , so please come to class on time. We will be covering a lot of content quickly, so it is very important that you are present for each day. If you are more than 15 minutes late, you will be marked as late. Three late marks results in an unexcused absence. Any disputes should be discussed with the TA within two weeks If you anticipate having to miss class, email the TA prior to the class. Absences will not be excused after the fact, except in extreme circumstances. You get one unexcused absence before it starts affecting your grade. Each unexcused absence that follows will result in one full letter grade deduction from your participation score. Your participation grade will also be determined by your level of engagement in class. If you seem disengaged or are disruptive in class, we will reach out and discuss the matter with you. If a pattern of disruption or disengagement continues, we will be taking note and it will be reflected in your grade. Other assignment-related rules Late Work On the day the project is due: Projects should be ready to play prior to the beginning of class. Project files and documentation should be submitted by 11:59PM the same day. After the due date, a full letter grade will be deducted from the project grade for each class day that the assignment is late. If you anticipate that you won\u2019t be able to complete the work by the due date, please contact us before the due date so we can discuss options. Appropriation, Fair Use, and Generated Content You should strive to develop your own assets for your project submissions. The use of existing prompt-based AI generation programs, including but not limited to ChatGPT, DALLE, Stable Diffusion, and Midjourney, is not allowed in this class. You may consider this to be one of the limitations of this class -- you are here to learn a specific set of technical skills, and the most advisable way to engage with this course is to not use these programs at all. There are many other reliable solutions and resources available to you, please use this opportunity to explore them. If you're planning to borrow or generate assets from somewhere else, you must consult the instructor beforehand AND be able to justify your decision for doing so. While developing early stage prototypes and testing mechanics, it is acceptable to use placeholder assets. No credit will be awarded for plagiarised work. All submitted projects should be original and developed within the duration of this class. Remember to acknowledge / cite your tools and sources appropriately in your submission. Resources Readings / Games All assigned readings and games will be provided for you -- no need to purchase textbooks for this class. (see Readings & Homeplays for more details.) Required Tools Unity -- Please install Unity Hub and get the latest LTS version of Unity Editor (currently 2022.3.43f1). Other editor versions may differ slightly from each other, but anything 2021 or later should be ok. Visual Studio -- Install Microsoft Visual Studio or Visual Studio Code, you should have the option to do this when installing Unity. Recommended Tools 2D and 3D production software of your choice: Krita -- professional free and open source digital paint tool. Blender -- powerful free and open source 3D art and animation tool. Piskel -- free pixel art app. Aseprite -- inexpensive pixel art and animation tool. Sculptris -- \u201cA gateway into the exciting world of 3D.\u201d Crocotile 3d -- A tool for creating 3d scenes with 2d tiles. Mixamo -- Free, but requires a login. Includes community sourced walk cycles and 3D animations which you can apply to any model that can T-pose. Audio resources: freesound.org -- audio database that has search filters sorted by licenses. login required for downloading files. good source for adding sound effects and music to your projects. Audacity -- free software for recording and editing audio; the version without Muse Hub should suffice for your purposes. For more asset creation tools, check out this exhaustive list of cheap and free tools compiled by Everest Pipkin . Additional resources for C# scripting and Unity development: Unity documentation -- Scripting Reference and Editor Manual . Community Forums -- Stack Exchange , Unity Discussions . Learn C# in One Day and Learn it Well by Jamie Chan. Campus-wide resources and information Land Acknowledgement The University of California, Los Angeles occupies the ancestral, traditional, and contemporary Lands of the Tongva and Chumash peoples. Our ability to gather and learn here is the result of coercion, dispossession, and colonization. We are grateful for the land itself and the people that have stewarded it through generations. While a land acknowledgment is not enough, it is the first step in the work toward supporting decolonial and indigenous movements for sovereignty and self-determination. Read more about what land you\u2019re occupying: https://native-land.ca/ Other resources on land repatriation: UCLA Mapping Indigenous LA -- an online archive of a storymapping research project about indigenous Los Angeles peoples, histories, and geographies from past and present. California History (Winter 2023), Respecting the Ancestors: On Repatriating American Indian Remains -- 2023 essay report on the history of repatriating indigenous peoples remains (mostly a lack thereof), including UC-specific case studies. Decolonization is not a metaphor -- article on what is unsettling about decolonisation as a caution against the loose use of the term in advocacy and scholarship. Commitment to Diversity & Safer Spaces We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students, TA, and instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the instructor or TA. (Statement adopted from voidLab at https://github.com/voidlab/diversity-statement ) COVID-19 It is important that everyone stay safe and avoid coming to class if you have any concerns about your health status. If you find that external struggles and/or COVID related challenges are affecting your ability to attend class, please reach out to us. We want you to be successful in the class, but we care about your well-being more than anything else. Open communication with us is most important in this regard, please let us know if you're sick and/or require additional accommodations. Students must adhere to the current campus directives related to COVID-19 mitigation, and refusal to do so may result in the student being asked to leave the classroom or referred to the Dean of Students. For more information about COVID-19 requirements on campus, please visit: https://covid-19.ucla.edu/information-for-students/ . Center for Accessible Education (CAE) The UCLA Center for Accessible Education (CAE) is responsible for ensuring students with documented disabilities have access to an inclusive, supportive learning environment. Students with disabilities or other needs requiring academic accommodations should speak with me as early in the quarter as possible to be sure they get the support they need. Students needing academic accommodations based on a disability should contact the Center for Accessible Education (CAE) at (310) 825-1501 or in person at Murphy Hall A255. When possible, students should contact the CAE within the first two weeks of the term as reasonable notice is needed to coordinate accommodations. For more information visit www.cae.ucla.edu . Academic Integrity and Information on Student Conduct UCLA is a community of scholars. In this community, all members including faculty, staff and students alike are responsible for maintaining standards of academic honesty. As a student and member of the University community, you are here to get an education and are, therefore, expected to demonstrate integrity in your academic endeavors. You are evaluated on your own merits. Cheating, plagiarism, collaborative work, multiple submissions without the permission of the professor, or other kinds of academic dishonesty are considered unacceptable behavior and will result in formal disciplinary proceedings usually resulting in suspension or dismissal. As specified in the UCLA Student Conduct Code , violations or attempted violations of academic dishonesty include, but are not limited to, cheating, fabrication, plagiarism, multiple submissions or facilitating academic dishonesty. When a student is suspected to have engaged in academic dishonesty, Academic Senate regulations require that the instructor report the allegation to the office of the Dean of Students. For more information, see the UCLA Student Conduct Code . TITLE IX UCLA prohibits gender discrimination, including sexual harassment, domestic and dating violence, sexual assault, and stalking. If you have experienced sexual harassment or sexual violence, there are a variety of resources to assist you. Confidential Resources You can receive confidential support and advocacy at the CARE Advocacy Office for Sexual and Gender-Based Violence, 1st Floor Wooden Center West, CAREadvocate@careprogram.ucla.edu , (310) 206-2465. Counseling and Psychological Services (CAPS) also provides confidential counseling to all students and can be reached 24/7 at (310) 825-0768. Non-Confidential Resources You can also report sexual violence or sexual harassment directly to the University\u2019s Title IX Coordinator, 2241 Murphy Hall, titleix@conet.ucla.edu , (310) 206-3417. Reports to law enforcement can be made to UCPD at (310) 825-1491. These offices may be required to pursue an official investigation. Faculty and TAs are required under the UC Policy on Sexual Violence and Sexual Harassment to inform the Title IX Coordinator\u2014A NON-CONFIDENTIAL RESOURCE\u2014should they become aware that you or any other student has experienced sexual violence or sexual harassment. Psychological Health, Well-Being and Resilience UCLA is renowned for academic excellence, and yet we know that many students feel overwhelmed at times by demands to succeed academically, socially and personally. Our campus community is committed to helping all students thrive, learn to cope with stress, and build resilience. Remember, self-care is a skill that is critical to your long-term success. Here are some of the many resources available at UCLA to support you: Counseling and Psychological Services (CAPS) : https://www.counseling.ucla.edu/ Provides counseling and other psychological/mental health services to students. Walk-in hours are Monday-Thursday 8am-4:30pm and Friday 9am-4:30pm in John Wooden Center West. Crisis counseling is also available 24 hours/day at (310) 825-0768. Ashe Student Health and Wellness Center : http://www.studenthealth.ucla.edu Provides high quality and accessible ambulatory healthcare and education by caring professionals to support the academic success and personal development of all UCLA students. Healthy Campus Initiative (HCI) : https://healthy.ucla.edu Provides links to a wide variety of resources for enhancing physical and psychological well-being, positive social interactions, healthy sleep, healthy eating, healthy physical activity and more. Campus and Student Resilience : https://www.resilience.ucla.edu/ Provides programs to promote resilience and trains students to help support their peers. UCLA Recreation : https://www.recreation.ucla.edu/ Offers a broad array of services and programs including fitness, yoga, dance, martial arts, meditation, sports, and much more. Equity, Diversity and Inclusion : https://equity.ucla.edu/ Committed to providing an equal learning, working and living environment at UCLA and supports a range of programs to promote these goals campus-wide. UCLA GRIT Coaching Program : https://www.grit.ucla.edu/ GRIT stands for Guidance, Resilience, Integrity and Transformation. In this program, UCLA students receive individualized support from trained peer coaches to manage stress, foster positive social connections, set goals, and navigate campus resources. Resources for Students Dealing with Financial Stress Economic Crisis Response : https://www.studentincrisis.ucla.edu/Economic-Crisis-Response provides support and guidance to students who have self-identified, or are identified by UCLA faculty or staff, as experiencing a financial crisis that impacts their academic success at UCLA. Bruin Shelter : http://www.bruinshelter.org/ provides a safe, supportive environment for fellow college students experiencing homelessness by fostering a collaborative effort between universities, community-based organizations, and service providers. The CPO Food Closet : http://www.cpo.ucla.edu/cpo/foodcloset/ provides free food for any UCLA student who may be experiencing hunger and/or struggling to attain food due to financial hardships.","title":"\ud83d\udcdc Syllabus"},{"location":"syllabus/#syllabus","text":"","title":"\ud83d\udcdc Syllabus"},{"location":"syllabus/#fall-2024","text":"Broad 4240 Tuesdays and Thursdays, 2 p.m. - 4:50 p.m. INSTRUCTOR - Hua Chai (he/they) Office hours: By appointment only; Thursdays, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: huazzers@g.ucla.edu TEACHING ASSISTANT - Sagan Yee (he/they) Office hours: By appointment only; Tuesdays, 12:30 p.m. - 1:30 p.m. @ Game Lab (Broad 3252) Email: saganyee@ucla.edu","title":"Fall 2024"},{"location":"syllabus/#course-description","text":"This course introduces the fundamentals of programming interactive projects in game development software. Classwork focuses on familiarizing students with game engines, computer programming concepts, player experience, and other skills that are foundational to making digital games. Lectures, exercises, and class projects teach skills needed to create digital games including custom rules, interactive physics systems, vectors, generative or randomized levels, save data, custom input systems, score-keeping, and sound. This course is offered in parallel with the concurrent courses, Game Design and Interactive Animation.","title":"Course Description"},{"location":"syllabus/#course-prerequisites","text":"DESMA 24 Motion DESMA 101 Media Arts Introduction / DESMA 104 Design Futures This course will be heavy on C# scripting in Unity scripting API. If you haven't fulfilled the above pre-requisites but have prior experience in either writing code or using the Unity game engine , please let me know.","title":"Course Prerequisites"},{"location":"syllabus/#learning-outcomes","text":"By the end of this course, you will be able to create a real-time, interactive software with custom rules, generative or randomized levels, save data, responsive controls, physics, sound, and simple animation. The skills you will learn in this class translate well to immersive media, generative animation, and other modes of human-computer expression.","title":"Learning Outcomes"},{"location":"syllabus/#course-outline","text":"","title":"Course Outline"},{"location":"syllabus/#unit-1-generative-computation","text":"Using generative design to create random/unique/dynamic ecosystems, worlds, characters, and events in Unity. Week 0-3 Intro to Unity Game Engine and C# , Vector fundamentals , Prefabs and Instantiation , Arrays and Randomness, UI Project 1: Auto-Generator","title":"Unit 1: Generative Computation"},{"location":"syllabus/#unit-2-playing-with-physics","text":"Using physics, math, and other game engine tools to design environments and mechanics for interactive gameplay. Week 4-6 Level Design , Input Systems , Physics Simulations , Static Variables and Singletons, Sound Project 2: Ball Game Remix","title":"Unit 2: Playing with Physics"},{"location":"syllabus/#intermission-alt-engines","text":"Explore other tiny game engines! Week 7 Micro Game Jam(s) -- Make an entire game in a single class.","title":"Intermission: Alt-Engines"},{"location":"syllabus/#unit-3-save-scene","text":"Using persistent data, effects, and cinematic affordances of the game engine to revise and refine your projects. Week 8-10 Cinemachine, Animation, Coroutines, Persistent Data Project 3: Final Project (TBD)","title":"Unit 3: Save &amp;&amp; Scene"},{"location":"syllabus/#assignments-and-grading","text":"See How To Submit on instructions for submitting Unity projects","title":"Assignments and Grading"},{"location":"syllabus/#course-breakdown","text":"Project 1: 15% Project 2: 25% Project 3: 25% Reading / Homeplay responses: 15% Participation / Attendance: 20%","title":"Course Breakdown"},{"location":"syllabus/#evaluation-criteria","text":"","title":"Evaluation Criteria"},{"location":"syllabus/#projects","text":"Considering the likelihood that everyone is coming in with different skillsets and coding experiences, the expectation for this class is that you approach each project with your own level of skill and comfort in mind. Design a project for yourself that pushes your technical skills a little bit , but also allows you to lean into your existing strengths and practices. We will evaluate your projects based on: Timely submission Did you submit your project on time? (see Late Work for more details.) Completion of Project Deliverables Does your project meet the requirements of the assignment? Attention to detail and craft Does the project run? Are there unintended bugs, glitches, etc. Project scope / aesthetic and technical ambition Are you doing the bare minimum, or are you pushing yourself technically and/or aesthetically? Creative risk-taking and resourcefulness Are you pushing the limits of the tools? Hacky solutions are perfectly acceptable and encouraged!","title":"Projects"},{"location":"syllabus/#readings-homeplays","text":"You will be assigned occasional readings and games that are related to this course, accompanied by a questionnaire for you to complete and bring to class. These are graded pass/fail -- if you did the work, you will get full credit.","title":"Readings / Homeplays"},{"location":"syllabus/#participation-attendance","text":"This is an in-person course , so please come to class on time. We will be covering a lot of content quickly, so it is very important that you are present for each day. If you are more than 15 minutes late, you will be marked as late. Three late marks results in an unexcused absence. Any disputes should be discussed with the TA within two weeks If you anticipate having to miss class, email the TA prior to the class. Absences will not be excused after the fact, except in extreme circumstances. You get one unexcused absence before it starts affecting your grade. Each unexcused absence that follows will result in one full letter grade deduction from your participation score. Your participation grade will also be determined by your level of engagement in class. If you seem disengaged or are disruptive in class, we will reach out and discuss the matter with you. If a pattern of disruption or disengagement continues, we will be taking note and it will be reflected in your grade.","title":"Participation / Attendance"},{"location":"syllabus/#other-assignment-related-rules","text":"","title":"Other assignment-related rules"},{"location":"syllabus/#late-work","text":"On the day the project is due: Projects should be ready to play prior to the beginning of class. Project files and documentation should be submitted by 11:59PM the same day. After the due date, a full letter grade will be deducted from the project grade for each class day that the assignment is late. If you anticipate that you won\u2019t be able to complete the work by the due date, please contact us before the due date so we can discuss options.","title":"Late Work"},{"location":"syllabus/#appropriation-fair-use-and-generated-content","text":"You should strive to develop your own assets for your project submissions. The use of existing prompt-based AI generation programs, including but not limited to ChatGPT, DALLE, Stable Diffusion, and Midjourney, is not allowed in this class. You may consider this to be one of the limitations of this class -- you are here to learn a specific set of technical skills, and the most advisable way to engage with this course is to not use these programs at all. There are many other reliable solutions and resources available to you, please use this opportunity to explore them. If you're planning to borrow or generate assets from somewhere else, you must consult the instructor beforehand AND be able to justify your decision for doing so. While developing early stage prototypes and testing mechanics, it is acceptable to use placeholder assets. No credit will be awarded for plagiarised work. All submitted projects should be original and developed within the duration of this class. Remember to acknowledge / cite your tools and sources appropriately in your submission.","title":"Appropriation, Fair Use, and Generated Content"},{"location":"syllabus/#resources","text":"","title":"Resources"},{"location":"syllabus/#readings-games","text":"All assigned readings and games will be provided for you -- no need to purchase textbooks for this class. (see Readings & Homeplays for more details.)","title":"Readings / Games"},{"location":"syllabus/#required-tools","text":"Unity -- Please install Unity Hub and get the latest LTS version of Unity Editor (currently 2022.3.43f1). Other editor versions may differ slightly from each other, but anything 2021 or later should be ok. Visual Studio -- Install Microsoft Visual Studio or Visual Studio Code, you should have the option to do this when installing Unity.","title":"Required Tools"},{"location":"syllabus/#recommended-tools","text":"2D and 3D production software of your choice: Krita -- professional free and open source digital paint tool. Blender -- powerful free and open source 3D art and animation tool. Piskel -- free pixel art app. Aseprite -- inexpensive pixel art and animation tool. Sculptris -- \u201cA gateway into the exciting world of 3D.\u201d Crocotile 3d -- A tool for creating 3d scenes with 2d tiles. Mixamo -- Free, but requires a login. Includes community sourced walk cycles and 3D animations which you can apply to any model that can T-pose. Audio resources: freesound.org -- audio database that has search filters sorted by licenses. login required for downloading files. good source for adding sound effects and music to your projects. Audacity -- free software for recording and editing audio; the version without Muse Hub should suffice for your purposes. For more asset creation tools, check out this exhaustive list of cheap and free tools compiled by Everest Pipkin . Additional resources for C# scripting and Unity development: Unity documentation -- Scripting Reference and Editor Manual . Community Forums -- Stack Exchange , Unity Discussions . Learn C# in One Day and Learn it Well by Jamie Chan.","title":"Recommended Tools"},{"location":"syllabus/#campus-wide-resources-and-information","text":"","title":"Campus-wide resources and information"},{"location":"syllabus/#land-acknowledgement","text":"The University of California, Los Angeles occupies the ancestral, traditional, and contemporary Lands of the Tongva and Chumash peoples. Our ability to gather and learn here is the result of coercion, dispossession, and colonization. We are grateful for the land itself and the people that have stewarded it through generations. While a land acknowledgment is not enough, it is the first step in the work toward supporting decolonial and indigenous movements for sovereignty and self-determination. Read more about what land you\u2019re occupying: https://native-land.ca/ Other resources on land repatriation: UCLA Mapping Indigenous LA -- an online archive of a storymapping research project about indigenous Los Angeles peoples, histories, and geographies from past and present. California History (Winter 2023), Respecting the Ancestors: On Repatriating American Indian Remains -- 2023 essay report on the history of repatriating indigenous peoples remains (mostly a lack thereof), including UC-specific case studies. Decolonization is not a metaphor -- article on what is unsettling about decolonisation as a caution against the loose use of the term in advocacy and scholarship.","title":"Land Acknowledgement"},{"location":"syllabus/#commitment-to-diversity-safer-spaces","text":"We understand the classroom as a space for practicing freedom; where one may challenge psychic, social, and cultural borders and create meaningful artistic expressions. To do so we must acknowledge and embrace the different identities and backgrounds we inhabit. This means that we will use preferred pronouns, respect self-identifications, and be mindful of special needs. Disagreement is encouraged and supported, however our differences affect our conceptualization and experience of reality, and it is extremely important to remember that certain gender, race, sex, and class identities are more privileged while others are undermined and marginalized. Consequently, this makes some people feel more protected or vulnerable during debates and discussions. A collaborative effort between the students, TA, and instructor is needed to create a supportive learning environment. While everyone should feel free to experiment creatively and conceptually, if a class member points out that something you have said or shared with the group is offensive, avoid being defensive; instead approach the discussion as a valuable opportunity for us to grow and learn from one another. Alternatively, if you feel that something said in discussion or included in a piece of work is harmful, you are encouraged to speak with the instructor or TA. (Statement adopted from voidLab at https://github.com/voidlab/diversity-statement )","title":"Commitment to Diversity &amp; Safer Spaces"},{"location":"syllabus/#covid-19","text":"It is important that everyone stay safe and avoid coming to class if you have any concerns about your health status. If you find that external struggles and/or COVID related challenges are affecting your ability to attend class, please reach out to us. We want you to be successful in the class, but we care about your well-being more than anything else. Open communication with us is most important in this regard, please let us know if you're sick and/or require additional accommodations. Students must adhere to the current campus directives related to COVID-19 mitigation, and refusal to do so may result in the student being asked to leave the classroom or referred to the Dean of Students. For more information about COVID-19 requirements on campus, please visit: https://covid-19.ucla.edu/information-for-students/ .","title":"COVID-19"},{"location":"syllabus/#center-for-accessible-education-cae","text":"The UCLA Center for Accessible Education (CAE) is responsible for ensuring students with documented disabilities have access to an inclusive, supportive learning environment. Students with disabilities or other needs requiring academic accommodations should speak with me as early in the quarter as possible to be sure they get the support they need. Students needing academic accommodations based on a disability should contact the Center for Accessible Education (CAE) at (310) 825-1501 or in person at Murphy Hall A255. When possible, students should contact the CAE within the first two weeks of the term as reasonable notice is needed to coordinate accommodations. For more information visit www.cae.ucla.edu .","title":"Center for Accessible Education (CAE)"},{"location":"syllabus/#academic-integrity-and-information-on-student-conduct","text":"UCLA is a community of scholars. In this community, all members including faculty, staff and students alike are responsible for maintaining standards of academic honesty. As a student and member of the University community, you are here to get an education and are, therefore, expected to demonstrate integrity in your academic endeavors. You are evaluated on your own merits. Cheating, plagiarism, collaborative work, multiple submissions without the permission of the professor, or other kinds of academic dishonesty are considered unacceptable behavior and will result in formal disciplinary proceedings usually resulting in suspension or dismissal. As specified in the UCLA Student Conduct Code , violations or attempted violations of academic dishonesty include, but are not limited to, cheating, fabrication, plagiarism, multiple submissions or facilitating academic dishonesty. When a student is suspected to have engaged in academic dishonesty, Academic Senate regulations require that the instructor report the allegation to the office of the Dean of Students. For more information, see the UCLA Student Conduct Code .","title":"Academic Integrity and Information on Student Conduct"},{"location":"syllabus/#title-ix","text":"UCLA prohibits gender discrimination, including sexual harassment, domestic and dating violence, sexual assault, and stalking. If you have experienced sexual harassment or sexual violence, there are a variety of resources to assist you.","title":"TITLE IX"},{"location":"syllabus/#confidential-resources","text":"You can receive confidential support and advocacy at the CARE Advocacy Office for Sexual and Gender-Based Violence, 1st Floor Wooden Center West, CAREadvocate@careprogram.ucla.edu , (310) 206-2465. Counseling and Psychological Services (CAPS) also provides confidential counseling to all students and can be reached 24/7 at (310) 825-0768.","title":"Confidential Resources"},{"location":"syllabus/#non-confidential-resources","text":"You can also report sexual violence or sexual harassment directly to the University\u2019s Title IX Coordinator, 2241 Murphy Hall, titleix@conet.ucla.edu , (310) 206-3417. Reports to law enforcement can be made to UCPD at (310) 825-1491. These offices may be required to pursue an official investigation. Faculty and TAs are required under the UC Policy on Sexual Violence and Sexual Harassment to inform the Title IX Coordinator\u2014A NON-CONFIDENTIAL RESOURCE\u2014should they become aware that you or any other student has experienced sexual violence or sexual harassment.","title":"Non-Confidential Resources"},{"location":"syllabus/#psychological-health-well-being-and-resilience","text":"UCLA is renowned for academic excellence, and yet we know that many students feel overwhelmed at times by demands to succeed academically, socially and personally. Our campus community is committed to helping all students thrive, learn to cope with stress, and build resilience. Remember, self-care is a skill that is critical to your long-term success. Here are some of the many resources available at UCLA to support you: Counseling and Psychological Services (CAPS) : https://www.counseling.ucla.edu/ Provides counseling and other psychological/mental health services to students. Walk-in hours are Monday-Thursday 8am-4:30pm and Friday 9am-4:30pm in John Wooden Center West. Crisis counseling is also available 24 hours/day at (310) 825-0768. Ashe Student Health and Wellness Center : http://www.studenthealth.ucla.edu Provides high quality and accessible ambulatory healthcare and education by caring professionals to support the academic success and personal development of all UCLA students. Healthy Campus Initiative (HCI) : https://healthy.ucla.edu Provides links to a wide variety of resources for enhancing physical and psychological well-being, positive social interactions, healthy sleep, healthy eating, healthy physical activity and more. Campus and Student Resilience : https://www.resilience.ucla.edu/ Provides programs to promote resilience and trains students to help support their peers. UCLA Recreation : https://www.recreation.ucla.edu/ Offers a broad array of services and programs including fitness, yoga, dance, martial arts, meditation, sports, and much more. Equity, Diversity and Inclusion : https://equity.ucla.edu/ Committed to providing an equal learning, working and living environment at UCLA and supports a range of programs to promote these goals campus-wide. UCLA GRIT Coaching Program : https://www.grit.ucla.edu/ GRIT stands for Guidance, Resilience, Integrity and Transformation. In this program, UCLA students receive individualized support from trained peer coaches to manage stress, foster positive social connections, set goals, and navigate campus resources.","title":"Psychological Health, Well-Being and Resilience"},{"location":"syllabus/#resources-for-students-dealing-with-financial-stress","text":"Economic Crisis Response : https://www.studentincrisis.ucla.edu/Economic-Crisis-Response provides support and guidance to students who have self-identified, or are identified by UCLA faculty or staff, as experiencing a financial crisis that impacts their academic success at UCLA. Bruin Shelter : http://www.bruinshelter.org/ provides a safe, supportive environment for fellow college students experiencing homelessness by fostering a collaborative effort between universities, community-based organizations, and service providers. The CPO Food Closet : http://www.cpo.ucla.edu/cpo/foodcloset/ provides free food for any UCLA student who may be experiencing hunger and/or struggling to attain food due to financial hardships.","title":"Resources for Students Dealing with Financial Stress"},{"location":"w0-unity-csharp/","text":"Intro to Game Engine, Unity, and C# What is a Game Engine? Let's break this question down. First of all... What is a Game? A game is an experience, and that experience has a certain character. [...] And if we\u2019re discussing an experience, then that implies someone is there to have that experience, someone we refer to as a player. We can\u2019t talk about a game without talking about the experience of the player playing that game, even if the playing experience we\u2019re talking about is often our own. The experience we call a game is created by the interaction between different rules , but the rules themselves aren\u2019t the game, the interaction is! A game can\u2019t exist without a player or players : someone needs to be engaging with the rules for the experience to happen. -- Chapter Three, Rise of the Videogame Zinesters. Anna Anthropy. For example, in a game of tag, what are the rules for... THE SETUP -- how do you decide who's \"it\"? when can they start tagging people? THE LEVEL / PLAYING FIELD -- how far can players go before they're \"out-of-bounds\"? are there safe zones where people can't be tagged? PLAYER BEHAVIOUR -- are players only allowed to travel in a certain manner (e.g. speedwalking, but no running), and how can that be enforced (e.g. speedwalking means both feet cannot be lifted off the ground at the same time at any moment.) If someone gets tagged, what happens to them? Do they freeze in position, become \"it\", or are they out of the game? CONCLUDING THE EXPERIENCE -- how do you know when the game has ended, and who the winner/loser is (if any)? \"Is xxx a game?\" -- is this a game? by sweetfish on itch.io. Technically, this question is irrelevant to this class. Regardless of what you end up making for your assignments, you'll eventually have to make decisions about the parameters and conditions of your project (which you could think of as being \"the rules of your game\") and consider how one's interaction / encounter of these \"rules\" will affect their overall experience of it. In this class, we will focus on how to implement these rules using game engines , so that you can explore its creative affordances for designing particular experiences. What is an Engine? -- Marine Diesel Engine Animation GIF ( Source ) -- Animation of Eadweard Muybridge\u2019s Jockey riding a race horse from his \u2018Animal Locomotion\u2019 series, 1878/87 / J. Paul Getty Museum, Los Angeles, USA / Bridgeman Images Consider the following definitions from the Wikitionary page for \"Engine\" : \"A complex mechanical device which converts energy into useful motion or physical effects.\" In a mechanical sense, an engine is an energy converter that can transform certain type(s) of input into other type(s) of \"productive\" output. \"A person or group of people which influence a larger group; a driving force.\" \"Anything used to effect a purpose; any device or contrivance; an agent.\" In an abstract sense, an engine is an information carrier that can contain, transfer, and transform ideas, beliefs, and principles. \"A large construction used in warfare, such as a battering ram, catapult etc. [from 14th c.]\" \"The part of a car or other vehicle which provides the force for motion, now especially one powered by internal combustion. [from 19th c.]\" From a historical and infrastructural standpoint, an engine is a catalyst of both the production and destruction of worlds, societies, and cultures. \"A software or hardware system responsible for a specific technical task (usually with qualifying word).\" a graphics engine; a physics engine. In computing, an engine is a specialised machine for performing a specific task. In this class, we will be mostly using software programs designed specifically for game development... but really, anything can be a \"game engine.\" It is also worth considering the various contexts in which the engine emerges, so that we can better grasp the possibilities and implications of this technology, and then decide how and where we would like to proceed with this tool. Put them together... GAME ENGINE! Returning to our first question: What is a game engine? -- guess we doin games now by morry kolman (@WTTDOTM) Tools designed specifically for developing games (e.g. Unity, Bitsy , PICO-8 , in-game level builders ) Platforms which primarily serve some other non-game-making function (if any at all), but are nonetheless used for making games. (e.g. Spread sheets , Checkboxes , Post-war junkyards and bombsites ) -- When Play Is Criminalized: Racial Disparities in Childhood . Eisa Nefertari Ulen, TRUTHOUT. If a game is \"an experience that is made from the interaction between different rules\" , then broadly speaking, a game engine could be anything that converts rules and interaction into playable experiences. Unity is a Game Engine We'll spend most of this course working in the Unity game engine. Unity, initially released in 2005, is a closed-source game engine, and Unity Technologies, the developer of the engine, has been a publicly traded company since 2020. The engine gained popularity through being free for small, independent developers, with a relatively easy learning curve. Compared to most other game engines, Unity also tries to avoid being aesthetically identifiable and not be tied to a particular genre of game. Other industries use Unity for things like Architectural and Auto rendering, Film and TV production , AI training and computer vision . Unity also contracts with the US Department of Defense for military training and simulation. Anatomy of the Unity Editor -- Unity Editor window in default workspace layout Read the following articles from the Unity User Manual: Unity's interface GameObjects Transforms Using Components Unity C# Unity uses C#, a type of object-oriented language , as one of its primary scripting languages. We typically write Unity C# scripts to make customised blueprints for accessing, organising, and implementing data inside our game project. This is helpful for: storing information such as variables and functions inside an object or class ; programming interactive / dynamic behaviour in objects; Most of the time, we're working with a class called MonoBehaviour which behaves like a component that can be attached to any gameobject in our scene. Let's create a Unity C# script! Here's the general thought process when figuring out what to put in our script: OUTPUT -- \"I need my script to do THIS ...\" INPUT -- \"... so I need to access THESE VARIABLES ...\" METHOD -- \"... and call THESE FUNCTIONS in order of THIS SEQUENCE .\" Anatomy of a C# Script Watch this video for a brief introduction to C# Variables and Functions in Unity. Script Name use pascal case, e.g. MyScript.cs the file name of the script and the name of the MonoBehaviour must be exactly the same (case-sensitive). e.g. if your C# file name is \"ScoreManager.cs\", then the line declaring your Monobehaviour class in that script file should look like this: public class ScoreManager : MonoBehaviour {...} the name must be unique -- no two MonoBehaviours should have the same name. Namespace A reference library containing all the methods and classes for a specific context. using UnityEngine Variables Variables are labelled data containers that can be assigned values, and whose read/write access can be set by declaring them as public or private. If a variable property exists somewhere in a component, there's likely some way to access it via scripting (to learn more, Unity scripting reference is your best friend!) When creating variables: declare access permissions in lowercase (default: private ) declare what type of variable it is float - a numerical value that can be in decimals int - a numerical integer (whole numbers only) bool - binary property that can be either assigned 'true' or 'false' string - a sequence of characters other public classes including GameObject and components (e.g. Transform ) name the variable no spaces allowed. use camel case. int numberOfCamels use clear and descriptive nouns, the intent of this variable should be immediately apparent from its name if it is a bool, prefix with a verb (typically phrase as a question.) bool isWalking, hasSpecialAbility; use prefixes with an underscore to differentiate private member variables from public ones. private bool _currentHealth; private static int s_winScore; Functions There are two main types of functions: method functions -- a way to group lines of code under one name; good for if you need to call a specific set of codes multiple times; event functions -- automatically tells Unity what to do at very particular instances in the game. Functions may take in variables as arguments. When creating functions: declare access permissions in lowercase (default: private ) what type of value it returns in lowercase (if any) -- void returns no value. name of the function in pascal case, followed by parenthesis containing any argument variables. float MultiplyByTwo(float initialFloat){...} Key principles of Programming in Unity C# Single Responsibility -- Every module of code (class, function, etc.) should have a one and only purpose in the software functionality. This will be very helpful for: debugging scripts making your scripts easily reusable for other projects. Keep everything private unless it absolutely needs to be public. if a variable just needs to be visible in the Inspector but does not need to be publicly accessible, you should keep it private then add [SerializeField] before it. [SerializeField] bool _currentIndex; Anticipate errors, and help your script help you catch them if your script absolutely needs a type of component, precede your Monobehaviour declaration with [RequireComponent(typeof(ThisComponentClass))] use Debug.Log and Debug.Error to check for incorrect / null references. Use comments to contextualise your lines of code Exercise before next class Can you write a script that forces a GameObject to start at a specific position in the scene?","title":"Intro to Game Engine, Unity, and C&#35;"},{"location":"w0-unity-csharp/#intro-to-game-engine-unity-and-c","text":"","title":"Intro to Game Engine, Unity, and C&#35;"},{"location":"w0-unity-csharp/#what-is-a-game-engine","text":"Let's break this question down. First of all...","title":"What is a Game Engine?"},{"location":"w0-unity-csharp/#what-is-a-game","text":"A game is an experience, and that experience has a certain character. [...] And if we\u2019re discussing an experience, then that implies someone is there to have that experience, someone we refer to as a player. We can\u2019t talk about a game without talking about the experience of the player playing that game, even if the playing experience we\u2019re talking about is often our own. The experience we call a game is created by the interaction between different rules , but the rules themselves aren\u2019t the game, the interaction is! A game can\u2019t exist without a player or players : someone needs to be engaging with the rules for the experience to happen. -- Chapter Three, Rise of the Videogame Zinesters. Anna Anthropy. For example, in a game of tag, what are the rules for... THE SETUP -- how do you decide who's \"it\"? when can they start tagging people? THE LEVEL / PLAYING FIELD -- how far can players go before they're \"out-of-bounds\"? are there safe zones where people can't be tagged? PLAYER BEHAVIOUR -- are players only allowed to travel in a certain manner (e.g. speedwalking, but no running), and how can that be enforced (e.g. speedwalking means both feet cannot be lifted off the ground at the same time at any moment.) If someone gets tagged, what happens to them? Do they freeze in position, become \"it\", or are they out of the game? CONCLUDING THE EXPERIENCE -- how do you know when the game has ended, and who the winner/loser is (if any)?","title":"What is a Game?"},{"location":"w0-unity-csharp/#is-xxx-a-game","text":"-- is this a game? by sweetfish on itch.io. Technically, this question is irrelevant to this class. Regardless of what you end up making for your assignments, you'll eventually have to make decisions about the parameters and conditions of your project (which you could think of as being \"the rules of your game\") and consider how one's interaction / encounter of these \"rules\" will affect their overall experience of it. In this class, we will focus on how to implement these rules using game engines , so that you can explore its creative affordances for designing particular experiences.","title":"\"Is xxx a game?\""},{"location":"w0-unity-csharp/#what-is-an-engine","text":"-- Marine Diesel Engine Animation GIF ( Source ) -- Animation of Eadweard Muybridge\u2019s Jockey riding a race horse from his \u2018Animal Locomotion\u2019 series, 1878/87 / J. Paul Getty Museum, Los Angeles, USA / Bridgeman Images Consider the following definitions from the Wikitionary page for \"Engine\" : \"A complex mechanical device which converts energy into useful motion or physical effects.\" In a mechanical sense, an engine is an energy converter that can transform certain type(s) of input into other type(s) of \"productive\" output. \"A person or group of people which influence a larger group; a driving force.\" \"Anything used to effect a purpose; any device or contrivance; an agent.\" In an abstract sense, an engine is an information carrier that can contain, transfer, and transform ideas, beliefs, and principles. \"A large construction used in warfare, such as a battering ram, catapult etc. [from 14th c.]\" \"The part of a car or other vehicle which provides the force for motion, now especially one powered by internal combustion. [from 19th c.]\" From a historical and infrastructural standpoint, an engine is a catalyst of both the production and destruction of worlds, societies, and cultures. \"A software or hardware system responsible for a specific technical task (usually with qualifying word).\" a graphics engine; a physics engine. In computing, an engine is a specialised machine for performing a specific task. In this class, we will be mostly using software programs designed specifically for game development... but really, anything can be a \"game engine.\" It is also worth considering the various contexts in which the engine emerges, so that we can better grasp the possibilities and implications of this technology, and then decide how and where we would like to proceed with this tool.","title":"What is an Engine?"},{"location":"w0-unity-csharp/#put-them-together-game-engine","text":"Returning to our first question:","title":"Put them together... GAME ENGINE!"},{"location":"w0-unity-csharp/#what-is-a-game-engine_1","text":"-- guess we doin games now by morry kolman (@WTTDOTM) Tools designed specifically for developing games (e.g. Unity, Bitsy , PICO-8 , in-game level builders ) Platforms which primarily serve some other non-game-making function (if any at all), but are nonetheless used for making games. (e.g. Spread sheets , Checkboxes , Post-war junkyards and bombsites ) -- When Play Is Criminalized: Racial Disparities in Childhood . Eisa Nefertari Ulen, TRUTHOUT. If a game is \"an experience that is made from the interaction between different rules\" , then broadly speaking, a game engine could be anything that converts rules and interaction into playable experiences.","title":"What is a game engine?"},{"location":"w0-unity-csharp/#unity-is-a-game-engine","text":"We'll spend most of this course working in the Unity game engine. Unity, initially released in 2005, is a closed-source game engine, and Unity Technologies, the developer of the engine, has been a publicly traded company since 2020. The engine gained popularity through being free for small, independent developers, with a relatively easy learning curve. Compared to most other game engines, Unity also tries to avoid being aesthetically identifiable and not be tied to a particular genre of game. Other industries use Unity for things like Architectural and Auto rendering, Film and TV production , AI training and computer vision . Unity also contracts with the US Department of Defense for military training and simulation.","title":"Unity is a Game Engine"},{"location":"w0-unity-csharp/#anatomy-of-the-unity-editor","text":"-- Unity Editor window in default workspace layout Read the following articles from the Unity User Manual: Unity's interface GameObjects Transforms Using Components","title":"Anatomy of the Unity Editor"},{"location":"w0-unity-csharp/#unity-c","text":"Unity uses C#, a type of object-oriented language , as one of its primary scripting languages. We typically write Unity C# scripts to make customised blueprints for accessing, organising, and implementing data inside our game project. This is helpful for: storing information such as variables and functions inside an object or class ; programming interactive / dynamic behaviour in objects; Most of the time, we're working with a class called MonoBehaviour which behaves like a component that can be attached to any gameobject in our scene.","title":"Unity C&#35;"},{"location":"w0-unity-csharp/#lets-create-a-unity-c-script","text":"Here's the general thought process when figuring out what to put in our script: OUTPUT -- \"I need my script to do THIS ...\" INPUT -- \"... so I need to access THESE VARIABLES ...\" METHOD -- \"... and call THESE FUNCTIONS in order of THIS SEQUENCE .\"","title":"Let's create a Unity C&#35; script!"},{"location":"w0-unity-csharp/#anatomy-of-a-c-script","text":"Watch this video for a brief introduction to C# Variables and Functions in Unity.","title":"Anatomy of a C&#35; Script"},{"location":"w0-unity-csharp/#script-name","text":"use pascal case, e.g. MyScript.cs the file name of the script and the name of the MonoBehaviour must be exactly the same (case-sensitive). e.g. if your C# file name is \"ScoreManager.cs\", then the line declaring your Monobehaviour class in that script file should look like this: public class ScoreManager : MonoBehaviour {...} the name must be unique -- no two MonoBehaviours should have the same name.","title":"Script Name"},{"location":"w0-unity-csharp/#namespace","text":"A reference library containing all the methods and classes for a specific context. using UnityEngine","title":"Namespace"},{"location":"w0-unity-csharp/#variables","text":"Variables are labelled data containers that can be assigned values, and whose read/write access can be set by declaring them as public or private. If a variable property exists somewhere in a component, there's likely some way to access it via scripting (to learn more, Unity scripting reference is your best friend!) When creating variables: declare access permissions in lowercase (default: private ) declare what type of variable it is float - a numerical value that can be in decimals int - a numerical integer (whole numbers only) bool - binary property that can be either assigned 'true' or 'false' string - a sequence of characters other public classes including GameObject and components (e.g. Transform ) name the variable no spaces allowed. use camel case. int numberOfCamels use clear and descriptive nouns, the intent of this variable should be immediately apparent from its name if it is a bool, prefix with a verb (typically phrase as a question.) bool isWalking, hasSpecialAbility; use prefixes with an underscore to differentiate private member variables from public ones. private bool _currentHealth; private static int s_winScore;","title":"Variables"},{"location":"w0-unity-csharp/#functions","text":"There are two main types of functions: method functions -- a way to group lines of code under one name; good for if you need to call a specific set of codes multiple times; event functions -- automatically tells Unity what to do at very particular instances in the game. Functions may take in variables as arguments. When creating functions: declare access permissions in lowercase (default: private ) what type of value it returns in lowercase (if any) -- void returns no value. name of the function in pascal case, followed by parenthesis containing any argument variables. float MultiplyByTwo(float initialFloat){...}","title":"Functions"},{"location":"w0-unity-csharp/#key-principles-of-programming-in-unity-c","text":"Single Responsibility -- Every module of code (class, function, etc.) should have a one and only purpose in the software functionality. This will be very helpful for: debugging scripts making your scripts easily reusable for other projects. Keep everything private unless it absolutely needs to be public. if a variable just needs to be visible in the Inspector but does not need to be publicly accessible, you should keep it private then add [SerializeField] before it. [SerializeField] bool _currentIndex; Anticipate errors, and help your script help you catch them if your script absolutely needs a type of component, precede your Monobehaviour declaration with [RequireComponent(typeof(ThisComponentClass))] use Debug.Log and Debug.Error to check for incorrect / null references. Use comments to contextualise your lines of code","title":"Key principles of Programming in Unity C&#35;"},{"location":"w0-unity-csharp/#exercise-before-next-class","text":"Can you write a script that forces a GameObject to start at a specific position in the scene?","title":"Exercise before next class"}]}